
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000419c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080042b0  080042b0  000142b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08004318  08004318  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004318  08004318  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800431c  0800431c  0001431c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08004320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  200000c0  080043e0  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080043e0  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba82  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002001  00000000  00000000  0002bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179a4  00000000  00000000  0002eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4d0  00000000  00000000  0004688c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086037  00000000  00000000  00052d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8d93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf0  00000000  00000000  000d8de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004294 	.word	0x08004294

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	08004294 	.word	0x08004294

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <buttonReading>:
static GPIO_PinState buttonDebounce1[BUTTON_NUMBER];
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];
static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
    for (int i = 0; i < BUTTON_NUMBER; i++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	e07d      	b.n	8000b80 <buttonReading+0x108>
        buttonDebounce2[i] = buttonDebounce1[i];
 8000a84:	4a43      	ldr	r2, [pc, #268]	; (8000b94 <buttonReading+0x11c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	7819      	ldrb	r1, [r3, #0]
 8000a8c:	4a42      	ldr	r2, [pc, #264]	; (8000b98 <buttonReading+0x120>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	460a      	mov	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
        buttonDebounce1[i] = buttonDebounce0[i];
 8000a96:	4a41      	ldr	r2, [pc, #260]	; (8000b9c <buttonReading+0x124>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	7819      	ldrb	r1, [r3, #0]
 8000a9e:	4a3d      	ldr	r2, [pc, #244]	; (8000b94 <buttonReading+0x11c>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	701a      	strb	r2, [r3, #0]
        buttonDebounce0[i] = HAL_GPIO_ReadPin(GPIOB, buttonPins[i]);
 8000aa8:	4a3d      	ldr	r2, [pc, #244]	; (8000ba0 <buttonReading+0x128>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	483c      	ldr	r0, [pc, #240]	; (8000ba4 <buttonReading+0x12c>)
 8000ab4:	f001 fc44 	bl	8002340 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4619      	mov	r1, r3
 8000abc:	4a37      	ldr	r2, [pc, #220]	; (8000b9c <buttonReading+0x124>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	460a      	mov	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]

        if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000ac6:	4a35      	ldr	r2, [pc, #212]	; (8000b9c <buttonReading+0x124>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4413      	add	r3, r2
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	4931      	ldr	r1, [pc, #196]	; (8000b94 <buttonReading+0x11c>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	440b      	add	r3, r1
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d14f      	bne.n	8000b7a <buttonReading+0x102>
 8000ada:	4a30      	ldr	r2, [pc, #192]	; (8000b9c <buttonReading+0x124>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	492d      	ldr	r1, [pc, #180]	; (8000b98 <buttonReading+0x120>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	440b      	add	r3, r1
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d145      	bne.n	8000b7a <buttonReading+0x102>
            if (buttonStates[i] != buttonDebounce0[i]) {
 8000aee:	4a2e      	ldr	r2, [pc, #184]	; (8000ba8 <buttonReading+0x130>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	4929      	ldr	r1, [pc, #164]	; (8000b9c <buttonReading+0x124>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	440b      	add	r3, r1
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d019      	beq.n	8000b36 <buttonReading+0xbe>
                buttonStates[i] = buttonDebounce0[i];
 8000b02:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <buttonReading+0x124>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	7819      	ldrb	r1, [r3, #0]
 8000b0a:	4a27      	ldr	r2, [pc, #156]	; (8000ba8 <buttonReading+0x130>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	460a      	mov	r2, r1
 8000b12:	701a      	strb	r2, [r3, #0]

                if (buttonStates[i] == BUTTON_PRESSED) {
 8000b14:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <buttonReading+0x130>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d12c      	bne.n	8000b7a <buttonReading+0x102>
                    buttonFlags[i] = 1;
 8000b20:	4a22      	ldr	r2, [pc, #136]	; (8000bac <buttonReading+0x134>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
                    buttonCounters[i] = BUTTON_PRESSED_DURATION / TIMER_DURATION;
 8000b2a:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <buttonReading+0x138>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2164      	movs	r1, #100	; 0x64
 8000b30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b34:	e021      	b.n	8000b7a <buttonReading+0x102>
                }
            } else {
                if (buttonStates[i] == BUTTON_PRESSED) {
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <buttonReading+0x130>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d11b      	bne.n	8000b7a <buttonReading+0x102>
                    buttonCounters[i]--;
 8000b42:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <buttonReading+0x138>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b219      	sxth	r1, r3
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <buttonReading+0x138>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    if (buttonCounters[i] <= 0) {
 8000b5a:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <buttonReading+0x138>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dc09      	bgt.n	8000b7a <buttonReading+0x102>
                        buttonFlags[i] = 1;
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <buttonReading+0x134>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
                        buttonCounters[i] = BUTTON_HOLDING_DURATION / TIMER_DURATION;
 8000b70:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <buttonReading+0x138>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2132      	movs	r1, #50	; 0x32
 8000b76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < BUTTON_NUMBER; i++) {
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	f77f af7e 	ble.w	8000a84 <buttonReading+0xc>
                    }
                }
            }
        }
    }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000e4 	.word	0x200000e4
 8000b98:	200000e8 	.word	0x200000e8
 8000b9c:	200000e0 	.word	0x200000e0
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	200000dc 	.word	0x200000dc
 8000bac:	200000ec 	.word	0x200000ec
 8000bb0:	200000f0 	.word	0x200000f0

08000bb4 <buttonPressed>:

int buttonPressed(int index) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    if (index < 0 || index >= BUTTON_NUMBER) return 0;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db02      	blt.n	8000bc8 <buttonPressed+0x14>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	dd01      	ble.n	8000bcc <buttonPressed+0x18>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e00d      	b.n	8000be8 <buttonPressed+0x34>

    if (buttonFlags[index] == 1) {
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <buttonPressed+0x40>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d106      	bne.n	8000be6 <buttonPressed+0x32>
        buttonFlags[index] = 0;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <buttonPressed+0x40>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
        return 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <buttonPressed+0x34>
    }

    return 0;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200000ec 	.word	0x200000ec

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfc:	f001 f8b6 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c00:	f000 f816 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c04:	f000 f89c 	bl	8000d40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c08:	f000 f84e 	bl	8000ca8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <main+0x34>)
 8000c0e:	f001 fff3 	bl	8002bf8 <HAL_TIM_Base_Start_IT>
  led7segInit();
 8000c12:	f000 fc69 	bl	80014e8 <led7segInit>
  fsmInit();
 8000c16:	f000 fd8f 	bl	8001738 <fsmInit>
  fsmInitMan();
 8000c1a:	f000 f904 	bl	8000e26 <fsmInitMan>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  led7segScanning();
 8000c1e:	f000 fc8b 	bl	8001538 <led7segScanning>
	  fsmProcessing();
 8000c22:	f000 fe25 	bl	8001870 <fsmProcessing>
	  fsmManua();
 8000c26:	f000 f999 	bl	8000f5c <fsmManua>
	  led7segScanning();
 8000c2a:	e7f8      	b.n	8000c1e <main+0x26>
 8000c2c:	20000124 	.word	0x20000124

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b090      	sub	sp, #64	; 0x40
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	2228      	movs	r2, #40	; 0x28
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fb90 	bl	8003364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c62:	f107 0318 	add.w	r3, r7, #24
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fb9a 	bl	80023a0 <HAL_RCC_OscConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c72:	f000 f8d3 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fe06 	bl	80028a0 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c9a:	f000 f8bf 	bl	8000e1c <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3740      	adds	r7, #64	; 0x40
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <MX_TIM2_Init+0x94>)
 8000cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_TIM2_Init+0x94>)
 8000cce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000cd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_TIM2_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_TIM2_Init+0x94>)
 8000cdc:	2209      	movs	r2, #9
 8000cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_TIM2_Init+0x94>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_TIM2_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <MX_TIM2_Init+0x94>)
 8000cee:	f001 ff33 	bl	8002b58 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cf8:	f000 f890 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <MX_TIM2_Init+0x94>)
 8000d0a:	f002 f8b1 	bl	8002e70 <HAL_TIM_ConfigClockSource>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d14:	f000 f882 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_TIM2_Init+0x94>)
 8000d26:	f002 fa89 	bl	800323c <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d30:	f000 f874 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000124 	.word	0x20000124

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <MX_GPIO_Init+0xb8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <MX_GPIO_Init+0xb8>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_GPIO_Init+0xb8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_GPIO_Init+0xb8>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <MX_GPIO_Init+0xb8>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_GPIO_Init+0xb8>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRAFFIC0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_AMBER_Pin|TRAFFIC1_GREEN_Pin
 8000d84:	2200      	movs	r2, #0
 8000d86:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000d8a:	481c      	ldr	r0, [pc, #112]	; (8000dfc <MX_GPIO_Init+0xbc>)
 8000d8c:	f001 faef 	bl	800236e <HAL_GPIO_WritePin>
                          |LED7SEG_0_Pin|LED7SEG_1_Pin|LED7SEG_2_Pin|LED7SEG_3_Pin
                          |TRAFFIC0_RED_Pin|TRAFFIC0_AMBER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7SEG_A_Pin|LED7SEG_B_Pin|LED7SEG_C_Pin|LED7SEG_D_Pin
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000d96:	481a      	ldr	r0, [pc, #104]	; (8000e00 <MX_GPIO_Init+0xc0>)
 8000d98:	f001 fae9 	bl	800236e <HAL_GPIO_WritePin>
                          |LED7SEG_E_Pin|LED7SEG_F_Pin|LED7SEG_G_Pin|LED7SEG_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	4813      	ldr	r0, [pc, #76]	; (8000dfc <MX_GPIO_Init+0xbc>)
 8000db0:	f001 f94c 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_AMBER_Pin TRAFFIC1_GREEN_Pin
                           LED7SEG_0_Pin LED7SEG_1_Pin LED7SEG_2_Pin LED7SEG_3_Pin
                           TRAFFIC0_RED_Pin TRAFFIC0_AMBER_Pin */
  GPIO_InitStruct.Pin = TRAFFIC0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_AMBER_Pin|TRAFFIC1_GREEN_Pin
 8000db4:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000db8:	60bb      	str	r3, [r7, #8]
                          |LED7SEG_0_Pin|LED7SEG_1_Pin|LED7SEG_2_Pin|LED7SEG_3_Pin
                          |TRAFFIC0_RED_Pin|TRAFFIC0_AMBER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480b      	ldr	r0, [pc, #44]	; (8000dfc <MX_GPIO_Init+0xbc>)
 8000dce:	f001 f93d 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7SEG_A_Pin LED7SEG_B_Pin LED7SEG_C_Pin LED7SEG_D_Pin
                           LED7SEG_E_Pin LED7SEG_F_Pin LED7SEG_G_Pin LED7SEG_DP_Pin */
  GPIO_InitStruct.Pin = LED7SEG_A_Pin|LED7SEG_B_Pin|LED7SEG_C_Pin|LED7SEG_D_Pin
 8000dd2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000dd6:	60bb      	str	r3, [r7, #8]
                          |LED7SEG_E_Pin|LED7SEG_F_Pin|LED7SEG_G_Pin|LED7SEG_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2302      	movs	r3, #2
 8000de2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0308 	add.w	r3, r7, #8
 8000de8:	4619      	mov	r1, r3
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_GPIO_Init+0xc0>)
 8000dec:	f001 f92e 	bl	800204c <HAL_GPIO_Init>

}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	40010800 	.word	0x40010800

08000e04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    timerRun();
 8000e0c:	f000 fec6 	bl	8001b9c <timerRun>
    buttonReading();
 8000e10:	f7ff fe32 	bl	8000a78 <buttonReading>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>

08000e26 <fsmInitMan>:
 */

#include "manual_fsm.h"
enum FSM_STATE1 fsmStateMan = 0;

void fsmInitMan(void) {
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
    trafficInit();
 8000e2a:	f000 fbb7 	bl	800159c <trafficInit>
    fsmReInitMan(FSM_NORMAL_MAN);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f802 	bl	8000e38 <fsmReInitMan>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <fsmReInitMan>:

void fsmReInitMan(enum FSM_STATE1 stateMan) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
    switch (stateMan) {
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d87a      	bhi.n	8000f3e <fsmReInitMan+0x106>
 8000e48:	a201      	add	r2, pc, #4	; (adr r2, 8000e50 <fsmReInitMan+0x18>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000e61 	.word	0x08000e61
 8000e54:	08000eb5 	.word	0x08000eb5
 8000e58:	08000ee3 	.word	0x08000ee3
 8000e5c:	08000f11 	.word	0x08000f11
        case FSM_NORMAL_MAN:
            timerSet(TRAFFIC_SECOND_DURATION / TIMER_DURATION, 1);
 8000e60:	2101      	movs	r1, #1
 8000e62:	2064      	movs	r0, #100	; 0x64
 8000e64:	f000 fe7a 	bl	8001b5c <timerSet>
            timerSet(trafficRedDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 8000e68:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <fsmReInitMan+0x110>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2264      	movs	r2, #100	; 0x64
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	2102      	movs	r1, #2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fe71 	bl	8001b5c <timerSet>
            timerSet(trafficGreenDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <fsmReInitMan+0x114>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2264      	movs	r2, #100	; 0x64
 8000e80:	fb02 f303 	mul.w	r3, r2, r3
 8000e84:	2103      	movs	r1, #3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fe68 	bl	8001b5c <timerSet>
            led7segNumbers[0] = trafficRedDuration;
 8000e8c:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <fsmReInitMan+0x110>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a2f      	ldr	r2, [pc, #188]	; (8000f50 <fsmReInitMan+0x118>)
 8000e92:	6013      	str	r3, [r2, #0]
            led7segNumbers[1] = trafficGreenDuration;
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <fsmReInitMan+0x114>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a2d      	ldr	r2, [pc, #180]	; (8000f50 <fsmReInitMan+0x118>)
 8000e9a:	6053      	str	r3, [r2, #4]
            trafficReInit(TRAFFIC_RED, 0);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f000 fb98 	bl	80015d4 <trafficReInit>
            trafficReInit(TRAFFIC_GREEN, 1);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f000 fb94 	bl	80015d4 <trafficReInit>
            fsmStateMan = FSM_NORMAL_MAN;
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <fsmReInitMan+0x11c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
            break;
 8000eb2:	e045      	b.n	8000f40 <fsmReInitMan+0x108>

        case FSM_RED_MAN:
            timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	2019      	movs	r0, #25
 8000eb8:	f000 fe50 	bl	8001b5c <timerSet>
            led7segNumbers[0] = 2;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <fsmReInitMan+0x118>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	601a      	str	r2, [r3, #0]
            led7segNumbers[1] = trafficRedDuration;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <fsmReInitMan+0x110>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <fsmReInitMan+0x118>)
 8000ec8:	6053      	str	r3, [r2, #4]
            trafficReInit(TRAFFIC_OFF, 0);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 fb81 	bl	80015d4 <trafficReInit>
            trafficReInit(TRAFFIC_OFF, 1);
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 fb7d 	bl	80015d4 <trafficReInit>
            fsmStateMan = FSM_RED_MAN;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <fsmReInitMan+0x11c>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
            break;
 8000ee0:	e02e      	b.n	8000f40 <fsmReInitMan+0x108>

        case FSM_AMBER_MAN:
            timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2019      	movs	r0, #25
 8000ee6:	f000 fe39 	bl	8001b5c <timerSet>
            led7segNumbers[0] = 3;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <fsmReInitMan+0x118>)
 8000eec:	2203      	movs	r2, #3
 8000eee:	601a      	str	r2, [r3, #0]
            led7segNumbers[1] = trafficAmberDuration;
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <fsmReInitMan+0x120>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <fsmReInitMan+0x118>)
 8000ef6:	6053      	str	r3, [r2, #4]
            trafficReInit(TRAFFIC_OFF, 0);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 fb6a 	bl	80015d4 <trafficReInit>
            trafficReInit(TRAFFIC_OFF, 1);
 8000f00:	2101      	movs	r1, #1
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 fb66 	bl	80015d4 <trafficReInit>
            fsmStateMan = FSM_AMBER_MAN;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <fsmReInitMan+0x11c>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	701a      	strb	r2, [r3, #0]
            break;
 8000f0e:	e017      	b.n	8000f40 <fsmReInitMan+0x108>

        case FSM_GREEN_MAN:
            timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8000f10:	2101      	movs	r1, #1
 8000f12:	2019      	movs	r0, #25
 8000f14:	f000 fe22 	bl	8001b5c <timerSet>
            led7segNumbers[0] = 4;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <fsmReInitMan+0x118>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	601a      	str	r2, [r3, #0]
            led7segNumbers[1] = trafficGreenDuration;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <fsmReInitMan+0x114>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <fsmReInitMan+0x118>)
 8000f24:	6053      	str	r3, [r2, #4]
            trafficReInit(TRAFFIC_OFF, 0);
 8000f26:	2100      	movs	r1, #0
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 fb53 	bl	80015d4 <trafficReInit>
            trafficReInit(TRAFFIC_OFF, 1);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 fb4f 	bl	80015d4 <trafficReInit>
            fsmStateMan = FSM_GREEN_MAN;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <fsmReInitMan+0x11c>)
 8000f38:	2203      	movs	r2, #3
 8000f3a:	701a      	strb	r2, [r3, #0]
            break;
 8000f3c:	e000      	b.n	8000f40 <fsmReInitMan+0x108>

        default:
            break;
 8000f3e:	bf00      	nop
    }
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2000010c 	.word	0x2000010c
 8000f4c:	20000114 	.word	0x20000114
 8000f50:	200000fc 	.word	0x200000fc
 8000f54:	200000f8 	.word	0x200000f8
 8000f58:	20000110 	.word	0x20000110

08000f5c <fsmManua>:

void fsmManua(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    switch (fsmStateMan) {
 8000f60:	4ba1      	ldr	r3, [pc, #644]	; (80011e8 <fsmManua+0x28c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	f200 81b6 	bhi.w	80012d6 <fsmManua+0x37a>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <fsmManua+0x14>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	080010e1 	.word	0x080010e1
 8000f78:	0800119f 	.word	0x0800119f
 8000f7c:	08001277 	.word	0x08001277
        case FSM_NORMAL_MAN:
            if (timerFlags[1] == 1) {
 8000f80:	4b9a      	ldr	r3, [pc, #616]	; (80011ec <fsmManua+0x290>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d11b      	bne.n	8000fc0 <fsmManua+0x64>
                timerSet(TRAFFIC_SECOND_DURATION / TIMER_DURATION, 1);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f000 fde6 	bl	8001b5c <timerSet>
                led7segNumbers[0]--;
 8000f90:	4b97      	ldr	r3, [pc, #604]	; (80011f0 <fsmManua+0x294>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	4a96      	ldr	r2, [pc, #600]	; (80011f0 <fsmManua+0x294>)
 8000f98:	6013      	str	r3, [r2, #0]
                if (led7segNumbers[0] < 0) led7segNumbers[0] = 0;
 8000f9a:	4b95      	ldr	r3, [pc, #596]	; (80011f0 <fsmManua+0x294>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da02      	bge.n	8000fa8 <fsmManua+0x4c>
 8000fa2:	4b93      	ldr	r3, [pc, #588]	; (80011f0 <fsmManua+0x294>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
                led7segNumbers[1]--;
 8000fa8:	4b91      	ldr	r3, [pc, #580]	; (80011f0 <fsmManua+0x294>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	4a90      	ldr	r2, [pc, #576]	; (80011f0 <fsmManua+0x294>)
 8000fb0:	6053      	str	r3, [r2, #4]
                if (led7segNumbers[1] < 0) led7segNumbers[1] = 0;
 8000fb2:	4b8f      	ldr	r3, [pc, #572]	; (80011f0 <fsmManua+0x294>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da02      	bge.n	8000fc0 <fsmManua+0x64>
 8000fba:	4b8d      	ldr	r3, [pc, #564]	; (80011f0 <fsmManua+0x294>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
            }

            if (timerFlags[2] == 1) {
 8000fc0:	4b8a      	ldr	r3, [pc, #552]	; (80011ec <fsmManua+0x290>)
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d140      	bne.n	800104a <fsmManua+0xee>
                switch (trafficState[0]) {
 8000fc8:	4b8a      	ldr	r3, [pc, #552]	; (80011f4 <fsmManua+0x298>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d02a      	beq.n	8001026 <fsmManua+0xca>
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	dc3c      	bgt.n	800104e <fsmManua+0xf2>
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d002      	beq.n	8000fde <fsmManua+0x82>
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d012      	beq.n	8001002 <fsmManua+0xa6>
                        led7segNumbers[0] = trafficAmberDuration;
                        trafficReInit(TRAFFIC_AMBER, 0);
                        break;

                    default:
                        break;
 8000fdc:	e037      	b.n	800104e <fsmManua+0xf2>
                        timerSet(trafficGreenDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 8000fde:	4b86      	ldr	r3, [pc, #536]	; (80011f8 <fsmManua+0x29c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2264      	movs	r2, #100	; 0x64
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fdb6 	bl	8001b5c <timerSet>
                        led7segNumbers[0] = trafficGreenDuration;
 8000ff0:	4b81      	ldr	r3, [pc, #516]	; (80011f8 <fsmManua+0x29c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a7e      	ldr	r2, [pc, #504]	; (80011f0 <fsmManua+0x294>)
 8000ff6:	6013      	str	r3, [r2, #0]
                        trafficReInit(TRAFFIC_GREEN, 0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 faea 	bl	80015d4 <trafficReInit>
                        break;
 8001000:	e026      	b.n	8001050 <fsmManua+0xf4>
                        timerSet(trafficRedDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 8001002:	4b7e      	ldr	r3, [pc, #504]	; (80011fc <fsmManua+0x2a0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2264      	movs	r2, #100	; 0x64
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	2102      	movs	r1, #2
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fda4 	bl	8001b5c <timerSet>
                        led7segNumbers[0] = trafficRedDuration;
 8001014:	4b79      	ldr	r3, [pc, #484]	; (80011fc <fsmManua+0x2a0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a75      	ldr	r2, [pc, #468]	; (80011f0 <fsmManua+0x294>)
 800101a:	6013      	str	r3, [r2, #0]
                        trafficReInit(TRAFFIC_RED, 0);
 800101c:	2100      	movs	r1, #0
 800101e:	2001      	movs	r0, #1
 8001020:	f000 fad8 	bl	80015d4 <trafficReInit>
                        break;
 8001024:	e014      	b.n	8001050 <fsmManua+0xf4>
                        timerSet(trafficAmberDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 8001026:	4b76      	ldr	r3, [pc, #472]	; (8001200 <fsmManua+0x2a4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2264      	movs	r2, #100	; 0x64
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	2102      	movs	r1, #2
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fd92 	bl	8001b5c <timerSet>
                        led7segNumbers[0] = trafficAmberDuration;
 8001038:	4b71      	ldr	r3, [pc, #452]	; (8001200 <fsmManua+0x2a4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a6c      	ldr	r2, [pc, #432]	; (80011f0 <fsmManua+0x294>)
 800103e:	6013      	str	r3, [r2, #0]
                        trafficReInit(TRAFFIC_AMBER, 0);
 8001040:	2100      	movs	r1, #0
 8001042:	2002      	movs	r0, #2
 8001044:	f000 fac6 	bl	80015d4 <trafficReInit>
                        break;
 8001048:	e002      	b.n	8001050 <fsmManua+0xf4>
                }
            }
 800104a:	bf00      	nop
 800104c:	e000      	b.n	8001050 <fsmManua+0xf4>
                        break;
 800104e:	bf00      	nop

            if (timerFlags[3] == 1) {
 8001050:	4b66      	ldr	r3, [pc, #408]	; (80011ec <fsmManua+0x290>)
 8001052:	78db      	ldrb	r3, [r3, #3]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d140      	bne.n	80010da <fsmManua+0x17e>
                switch (trafficState[1]) {
 8001058:	4b66      	ldr	r3, [pc, #408]	; (80011f4 <fsmManua+0x298>)
 800105a:	785b      	ldrb	r3, [r3, #1]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d02a      	beq.n	80010b6 <fsmManua+0x15a>
 8001060:	2b03      	cmp	r3, #3
 8001062:	dc3c      	bgt.n	80010de <fsmManua+0x182>
 8001064:	2b01      	cmp	r3, #1
 8001066:	d002      	beq.n	800106e <fsmManua+0x112>
 8001068:	2b02      	cmp	r3, #2
 800106a:	d012      	beq.n	8001092 <fsmManua+0x136>
                        led7segNumbers[1] = trafficAmberDuration;
                        trafficReInit(TRAFFIC_AMBER, 1);
                        break;

                    default:
                        break;
 800106c:	e037      	b.n	80010de <fsmManua+0x182>
                        timerSet(trafficGreenDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <fsmManua+0x29c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2264      	movs	r2, #100	; 0x64
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	2103      	movs	r1, #3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fd6e 	bl	8001b5c <timerSet>
                        led7segNumbers[1] = trafficGreenDuration;
 8001080:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <fsmManua+0x29c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a5a      	ldr	r2, [pc, #360]	; (80011f0 <fsmManua+0x294>)
 8001086:	6053      	str	r3, [r2, #4]
                        trafficReInit(TRAFFIC_GREEN, 1);
 8001088:	2101      	movs	r1, #1
 800108a:	2003      	movs	r0, #3
 800108c:	f000 faa2 	bl	80015d4 <trafficReInit>
                        break;
 8001090:	e026      	b.n	80010e0 <fsmManua+0x184>
                        timerSet(trafficRedDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 8001092:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <fsmManua+0x2a0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2264      	movs	r2, #100	; 0x64
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	2103      	movs	r1, #3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fd5c 	bl	8001b5c <timerSet>
                        led7segNumbers[1] = trafficRedDuration;
 80010a4:	4b55      	ldr	r3, [pc, #340]	; (80011fc <fsmManua+0x2a0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a51      	ldr	r2, [pc, #324]	; (80011f0 <fsmManua+0x294>)
 80010aa:	6053      	str	r3, [r2, #4]
                        trafficReInit(TRAFFIC_RED, 1);
 80010ac:	2101      	movs	r1, #1
 80010ae:	2001      	movs	r0, #1
 80010b0:	f000 fa90 	bl	80015d4 <trafficReInit>
                        break;
 80010b4:	e014      	b.n	80010e0 <fsmManua+0x184>
                        timerSet(trafficAmberDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 80010b6:	4b52      	ldr	r3, [pc, #328]	; (8001200 <fsmManua+0x2a4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2264      	movs	r2, #100	; 0x64
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	2103      	movs	r1, #3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fd4a 	bl	8001b5c <timerSet>
                        led7segNumbers[1] = trafficAmberDuration;
 80010c8:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <fsmManua+0x2a4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <fsmManua+0x294>)
 80010ce:	6053      	str	r3, [r2, #4]
                        trafficReInit(TRAFFIC_AMBER, 1);
 80010d0:	2101      	movs	r1, #1
 80010d2:	2002      	movs	r0, #2
 80010d4:	f000 fa7e 	bl	80015d4 <trafficReInit>
                        break;
 80010d8:	e002      	b.n	80010e0 <fsmManua+0x184>
                }
            }
 80010da:	bf00      	nop
 80010dc:	e000      	b.n	80010e0 <fsmManua+0x184>
                        break;
 80010de:	bf00      	nop



        case FSM_RED_MAN:
            if (timerFlags[1] == 1) {
 80010e0:	4b42      	ldr	r3, [pc, #264]	; (80011ec <fsmManua+0x290>)
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d120      	bne.n	800112a <fsmManua+0x1ce>
                switch (trafficState[0]) {
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <fsmManua+0x298>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <fsmManua+0x19a>
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d00d      	beq.n	8001110 <fsmManua+0x1b4>
                        trafficReInit(TRAFFIC_OFF, 0);
                        trafficReInit(TRAFFIC_OFF, 1);
                        break;

                    default:
                        break;
 80010f4:	e01a      	b.n	800112c <fsmManua+0x1d0>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80010f6:	2101      	movs	r1, #1
 80010f8:	2019      	movs	r0, #25
 80010fa:	f000 fd2f 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_RED, 0);
 80010fe:	2100      	movs	r1, #0
 8001100:	2001      	movs	r0, #1
 8001102:	f000 fa67 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_RED, 1);
 8001106:	2101      	movs	r1, #1
 8001108:	2001      	movs	r0, #1
 800110a:	f000 fa63 	bl	80015d4 <trafficReInit>
                        break;
 800110e:	e00d      	b.n	800112c <fsmManua+0x1d0>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001110:	2101      	movs	r1, #1
 8001112:	2019      	movs	r0, #25
 8001114:	f000 fd22 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_OFF, 0);
 8001118:	2100      	movs	r1, #0
 800111a:	2000      	movs	r0, #0
 800111c:	f000 fa5a 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_OFF, 1);
 8001120:	2101      	movs	r1, #1
 8001122:	2000      	movs	r0, #0
 8001124:	f000 fa56 	bl	80015d4 <trafficReInit>
                        break;
 8001128:	e000      	b.n	800112c <fsmManua+0x1d0>
                }
            }
 800112a:	bf00      	nop
            if (buttonPressed(0)) {
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff fd41 	bl	8000bb4 <buttonPressed>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <fsmManua+0x1e2>
                    fsmReInitMan(FSM_AMBER_MAN);
 8001138:	2002      	movs	r0, #2
 800113a:	f7ff fe7d 	bl	8000e38 <fsmReInitMan>
                }

                if (buttonPressed(1)) {
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff fd38 	bl	8000bb4 <buttonPressed>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <fsmManua+0x206>
                    led7segNumbers[1]++;
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <fsmManua+0x294>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	3301      	adds	r3, #1
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <fsmManua+0x294>)
 8001152:	6053      	str	r3, [r2, #4]
                    if (led7segNumbers[1] >= pow(10, LED7SEG_DIGIT_NUMBER)) {
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <fsmManua+0x294>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b63      	cmp	r3, #99	; 0x63
 800115a:	dd02      	ble.n	8001162 <fsmManua+0x206>
                        led7segNumbers[1] = 0;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <fsmManua+0x294>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
                    }
                }

                if (buttonPressed(2)) {
 8001162:	2002      	movs	r0, #2
 8001164:	f7ff fd26 	bl	8000bb4 <buttonPressed>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <fsmManua+0x22a>
                    led7segNumbers[1]--;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <fsmManua+0x294>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <fsmManua+0x294>)
 8001176:	6053      	str	r3, [r2, #4]
                    if (led7segNumbers[1] < 0) {
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <fsmManua+0x294>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	da02      	bge.n	8001186 <fsmManua+0x22a>
                        led7segNumbers[1] = pow(10, LED7SEG_DIGIT_NUMBER) - 1;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <fsmManua+0x294>)
 8001182:	2263      	movs	r2, #99	; 0x63
 8001184:	605a      	str	r2, [r3, #4]
                    }
                }

                if (buttonPressed(3)) {
 8001186:	2003      	movs	r0, #3
 8001188:	f7ff fd14 	bl	8000bb4 <buttonPressed>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 80a3 	beq.w	80012da <fsmManua+0x37e>
                    trafficRedDuration = led7segNumbers[1];
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <fsmManua+0x294>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <fsmManua+0x2a0>)
 800119a:	6013      	str	r3, [r2, #0]
                }
                break;
 800119c:	e09d      	b.n	80012da <fsmManua+0x37e>

        case FSM_AMBER_MAN:
            if (timerFlags[1] == 1) {
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <fsmManua+0x290>)
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d12e      	bne.n	8001204 <fsmManua+0x2a8>
                switch (trafficState[0]) {
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <fsmManua+0x298>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <fsmManua+0x258>
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d00d      	beq.n	80011ce <fsmManua+0x272>
                        trafficReInit(TRAFFIC_OFF, 0);
                        trafficReInit(TRAFFIC_OFF, 1);
                        break;

                    default:
                        break;
 80011b2:	e028      	b.n	8001206 <fsmManua+0x2aa>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80011b4:	2101      	movs	r1, #1
 80011b6:	2019      	movs	r0, #25
 80011b8:	f000 fcd0 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_AMBER, 0);
 80011bc:	2100      	movs	r1, #0
 80011be:	2002      	movs	r0, #2
 80011c0:	f000 fa08 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_AMBER, 1);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2002      	movs	r0, #2
 80011c8:	f000 fa04 	bl	80015d4 <trafficReInit>
                        break;
 80011cc:	e01b      	b.n	8001206 <fsmManua+0x2aa>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80011ce:	2101      	movs	r1, #1
 80011d0:	2019      	movs	r0, #25
 80011d2:	f000 fcc3 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_OFF, 0);
 80011d6:	2100      	movs	r1, #0
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f9fb 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_OFF, 1);
 80011de:	2101      	movs	r1, #1
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 f9f7 	bl	80015d4 <trafficReInit>
                        break;
 80011e6:	e00e      	b.n	8001206 <fsmManua+0x2aa>
 80011e8:	200000f8 	.word	0x200000f8
 80011ec:	2000016c 	.word	0x2000016c
 80011f0:	200000fc 	.word	0x200000fc
 80011f4:	20000118 	.word	0x20000118
 80011f8:	20000114 	.word	0x20000114
 80011fc:	2000010c 	.word	0x2000010c
 8001200:	20000110 	.word	0x20000110
                }
            }
 8001204:	bf00      	nop

            if (buttonPressed(0)) {
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fcd4 	bl	8000bb4 <buttonPressed>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <fsmManua+0x2bc>
                fsmReInitMan(FSM_GREEN_MAN);
 8001212:	2003      	movs	r0, #3
 8001214:	f7ff fe10 	bl	8000e38 <fsmReInitMan>
            }

            if (buttonPressed(1)) {
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff fccb 	bl	8000bb4 <buttonPressed>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <fsmManua+0x2e0>
                led7segNumbers[1]++;
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <fsmManua+0x38c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	4a2f      	ldr	r2, [pc, #188]	; (80012e8 <fsmManua+0x38c>)
 800122c:	6053      	str	r3, [r2, #4]
                if (led7segNumbers[1] >= pow(10, LED7SEG_DIGIT_NUMBER)) {
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <fsmManua+0x38c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b63      	cmp	r3, #99	; 0x63
 8001234:	dd02      	ble.n	800123c <fsmManua+0x2e0>
                    led7segNumbers[1] = 0;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <fsmManua+0x38c>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
                }
            }

            if (buttonPressed(2)) {
 800123c:	2002      	movs	r0, #2
 800123e:	f7ff fcb9 	bl	8000bb4 <buttonPressed>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <fsmManua+0x304>
                led7segNumbers[1]--;
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <fsmManua+0x38c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	3b01      	subs	r3, #1
 800124e:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <fsmManua+0x38c>)
 8001250:	6053      	str	r3, [r2, #4]
                if (led7segNumbers[1] < 0) {
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <fsmManua+0x38c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	da02      	bge.n	8001260 <fsmManua+0x304>
                    led7segNumbers[1] = pow(10, LED7SEG_DIGIT_NUMBER) - 1;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <fsmManua+0x38c>)
 800125c:	2263      	movs	r2, #99	; 0x63
 800125e:	605a      	str	r2, [r3, #4]
                }
            }

            if (buttonPressed(3)) {
 8001260:	2003      	movs	r0, #3
 8001262:	f7ff fca7 	bl	8000bb4 <buttonPressed>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d038      	beq.n	80012de <fsmManua+0x382>
                trafficAmberDuration = led7segNumbers[1];
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <fsmManua+0x38c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <fsmManua+0x390>)
 8001272:	6013      	str	r3, [r2, #0]
            }
            break;
 8001274:	e033      	b.n	80012de <fsmManua+0x382>

        case FSM_GREEN_MAN:
            if (timerFlags[1] == 1) {
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <fsmManua+0x394>)
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d120      	bne.n	80012c0 <fsmManua+0x364>
                switch (trafficState[0]) {
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <fsmManua+0x398>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <fsmManua+0x330>
 8001286:	2b03      	cmp	r3, #3
 8001288:	d00d      	beq.n	80012a6 <fsmManua+0x34a>
                        trafficReInit(TRAFFIC_OFF, 0);
                        trafficReInit(TRAFFIC_OFF, 1);
                        break;

                    default:
                        break;
 800128a:	e01a      	b.n	80012c2 <fsmManua+0x366>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 800128c:	2101      	movs	r1, #1
 800128e:	2019      	movs	r0, #25
 8001290:	f000 fc64 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_GREEN, 0);
 8001294:	2100      	movs	r1, #0
 8001296:	2003      	movs	r0, #3
 8001298:	f000 f99c 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_GREEN, 1);
 800129c:	2101      	movs	r1, #1
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f998 	bl	80015d4 <trafficReInit>
                        break;
 80012a4:	e00d      	b.n	80012c2 <fsmManua+0x366>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80012a6:	2101      	movs	r1, #1
 80012a8:	2019      	movs	r0, #25
 80012aa:	f000 fc57 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_OFF, 0);
 80012ae:	2100      	movs	r1, #0
 80012b0:	2000      	movs	r0, #0
 80012b2:	f000 f98f 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_OFF, 1);
 80012b6:	2101      	movs	r1, #1
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 f98b 	bl	80015d4 <trafficReInit>
                        break;
 80012be:	e000      	b.n	80012c2 <fsmManua+0x366>
                }
            }
 80012c0:	bf00      	nop
            if (buttonPressed(0)) {
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fc76 	bl	8000bb4 <buttonPressed>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <fsmManua+0x386>
                fsmReInitMan(FSM_NORMAL_MAN);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fdb2 	bl	8000e38 <fsmReInitMan>
            }
            break;
 80012d4:	e005      	b.n	80012e2 <fsmManua+0x386>
        default:
            break;
 80012d6:	bf00      	nop
 80012d8:	e004      	b.n	80012e4 <fsmManua+0x388>
                break;
 80012da:	bf00      	nop
 80012dc:	e002      	b.n	80012e4 <fsmManua+0x388>
            break;
 80012de:	bf00      	nop
 80012e0:	e000      	b.n	80012e4 <fsmManua+0x388>
            break;
 80012e2:	bf00      	nop
    }
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000fc 	.word	0x200000fc
 80012ec:	20000110 	.word	0x20000110
 80012f0:	2000016c 	.word	0x2000016c
 80012f4:	20000118 	.word	0x20000118

080012f8 <led7segDisplay>:
static uint16_t led7segPins[LED7SEG_NUMBER] = {LED7SEG_0_Pin, LED7SEG_1_Pin, LED7SEG_2_Pin, LED7SEG_3_Pin};

static uint16_t led7segNum0s[11] = {0xBF, 0x86, 0xDB, 0xCF, 0xE6, 0xED, 0xFD, 0x87, 0xFF, 0xEF, 0x00};
static uint16_t led7segNum1s[11] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10, 0xFF};

static void led7segDisplay(int index, int offset) {
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
    if (index < 0 || index >= LED7SEG_BLOCK_NUMBER) return;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f2c0 80d7 	blt.w	80014b8 <led7segDisplay+0x1c0>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	f300 80d3 	bgt.w	80014b8 <led7segDisplay+0x1c0>
    if (offset < 0 || offset >= LED7SEG_DIGIT_NUMBER) return;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	f2c0 80d1 	blt.w	80014bc <led7segDisplay+0x1c4>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	f300 80cd 	bgt.w	80014bc <led7segDisplay+0x1c4>

    int num = led7segNumbers[index] / (int)pow(10, LED7SEG_DIGIT_NUMBER - offset - 1) % 10;
 8001322:	4a69      	ldr	r2, [pc, #420]	; (80014c8 <led7segDisplay+0x1d0>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f1c3 0301 	rsb	r3, r3, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f85f 	bl	80003f4 <__aeabi_i2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	f04f 0000 	mov.w	r0, #0
 800133e:	4963      	ldr	r1, [pc, #396]	; (80014cc <led7segDisplay+0x1d4>)
 8001340:	f002 f818 	bl	8003374 <pow>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fb6c 	bl	8000a28 <__aeabi_d2iz>
 8001350:	4603      	mov	r3, r0
 8001352:	fb94 f2f3 	sdiv	r2, r4, r3
 8001356:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <led7segDisplay+0x1d8>)
 8001358:	fb83 1302 	smull	r1, r3, r3, r2
 800135c:	1099      	asrs	r1, r3, #2
 800135e:	17d3      	asrs	r3, r2, #31
 8001360:	1ac9      	subs	r1, r1, r3
 8001362:	460b      	mov	r3, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	60fb      	str	r3, [r7, #12]
    if (num >= 0 && num <= 9) {
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db11      	blt.n	8001398 <led7segDisplay+0xa0>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b09      	cmp	r3, #9
 8001378:	dc0e      	bgt.n	8001398 <led7segDisplay+0xa0>
        GPIOA->BSRR = led7segNum1s[num] << 8;
 800137a:	4a56      	ldr	r2, [pc, #344]	; (80014d4 <led7segDisplay+0x1dc>)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001382:	021a      	lsls	r2, r3, #8
 8001384:	4b54      	ldr	r3, [pc, #336]	; (80014d8 <led7segDisplay+0x1e0>)
 8001386:	611a      	str	r2, [r3, #16]
        GPIOA->BSRR = led7segNum0s[num] << (8 + 16);
 8001388:	4a54      	ldr	r2, [pc, #336]	; (80014dc <led7segDisplay+0x1e4>)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001390:	061a      	lsls	r2, r3, #24
 8001392:	4b51      	ldr	r3, [pc, #324]	; (80014d8 <led7segDisplay+0x1e0>)
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	e009      	b.n	80013ac <led7segDisplay+0xb4>
    } else {
        GPIOA->BSRR = led7segNum1s[10] << 8;
 8001398:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <led7segDisplay+0x1dc>)
 800139a:	8a9b      	ldrh	r3, [r3, #20]
 800139c:	021a      	lsls	r2, r3, #8
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <led7segDisplay+0x1e0>)
 80013a0:	611a      	str	r2, [r3, #16]
        GPIOA->BSRR = led7segNum0s[10] << (8 + 16);
 80013a2:	4b4e      	ldr	r3, [pc, #312]	; (80014dc <led7segDisplay+0x1e4>)
 80013a4:	8a9b      	ldrh	r3, [r3, #20]
 80013a6:	061a      	lsls	r2, r3, #24
 80013a8:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <led7segDisplay+0x1e0>)
 80013aa:	611a      	str	r2, [r3, #16]
    }

    switch (index * LED7SEG_BLOCK_NUMBER + offset) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	005a      	lsls	r2, r3, #1
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	f200 8083 	bhi.w	80014c0 <led7segDisplay+0x1c8>
 80013ba:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <led7segDisplay+0xc8>)
 80013bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	0800140b 	.word	0x0800140b
 80013c8:	08001445 	.word	0x08001445
 80013cc:	0800147f 	.word	0x0800147f
        case 0:
            HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_RESET);
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <led7segDisplay+0x1e8>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <led7segDisplay+0x1ec>)
 80013da:	f000 ffc8 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_SET);
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <led7segDisplay+0x1e8>)
 80013e0:	885b      	ldrh	r3, [r3, #2]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4619      	mov	r1, r3
 80013e6:	483f      	ldr	r0, [pc, #252]	; (80014e4 <led7segDisplay+0x1ec>)
 80013e8:	f000 ffc1 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_SET);
 80013ec:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <led7segDisplay+0x1e8>)
 80013ee:	889b      	ldrh	r3, [r3, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4619      	mov	r1, r3
 80013f4:	483b      	ldr	r0, [pc, #236]	; (80014e4 <led7segDisplay+0x1ec>)
 80013f6:	f000 ffba 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_SET);
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <led7segDisplay+0x1e8>)
 80013fc:	88db      	ldrh	r3, [r3, #6]
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	4838      	ldr	r0, [pc, #224]	; (80014e4 <led7segDisplay+0x1ec>)
 8001404:	f000 ffb3 	bl	800236e <HAL_GPIO_WritePin>
            break;
 8001408:	e05b      	b.n	80014c2 <led7segDisplay+0x1ca>
        case 1:
            HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_SET);
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <led7segDisplay+0x1e8>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	4834      	ldr	r0, [pc, #208]	; (80014e4 <led7segDisplay+0x1ec>)
 8001414:	f000 ffab 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_RESET);
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <led7segDisplay+0x1e8>)
 800141a:	885b      	ldrh	r3, [r3, #2]
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	4830      	ldr	r0, [pc, #192]	; (80014e4 <led7segDisplay+0x1ec>)
 8001422:	f000 ffa4 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_SET);
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <led7segDisplay+0x1e8>)
 8001428:	889b      	ldrh	r3, [r3, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	482d      	ldr	r0, [pc, #180]	; (80014e4 <led7segDisplay+0x1ec>)
 8001430:	f000 ff9d 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_SET);
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <led7segDisplay+0x1e8>)
 8001436:	88db      	ldrh	r3, [r3, #6]
 8001438:	2201      	movs	r2, #1
 800143a:	4619      	mov	r1, r3
 800143c:	4829      	ldr	r0, [pc, #164]	; (80014e4 <led7segDisplay+0x1ec>)
 800143e:	f000 ff96 	bl	800236e <HAL_GPIO_WritePin>
            break;
 8001442:	e03e      	b.n	80014c2 <led7segDisplay+0x1ca>
        case 2:
            HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_SET);
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <led7segDisplay+0x1e8>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4619      	mov	r1, r3
 800144c:	4825      	ldr	r0, [pc, #148]	; (80014e4 <led7segDisplay+0x1ec>)
 800144e:	f000 ff8e 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_SET);
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <led7segDisplay+0x1e8>)
 8001454:	885b      	ldrh	r3, [r3, #2]
 8001456:	2201      	movs	r2, #1
 8001458:	4619      	mov	r1, r3
 800145a:	4822      	ldr	r0, [pc, #136]	; (80014e4 <led7segDisplay+0x1ec>)
 800145c:	f000 ff87 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_RESET);
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <led7segDisplay+0x1e8>)
 8001462:	889b      	ldrh	r3, [r3, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	481e      	ldr	r0, [pc, #120]	; (80014e4 <led7segDisplay+0x1ec>)
 800146a:	f000 ff80 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_SET);
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <led7segDisplay+0x1e8>)
 8001470:	88db      	ldrh	r3, [r3, #6]
 8001472:	2201      	movs	r2, #1
 8001474:	4619      	mov	r1, r3
 8001476:	481b      	ldr	r0, [pc, #108]	; (80014e4 <led7segDisplay+0x1ec>)
 8001478:	f000 ff79 	bl	800236e <HAL_GPIO_WritePin>
            break;
 800147c:	e021      	b.n	80014c2 <led7segDisplay+0x1ca>
        case 3:
            HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_SET);
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <led7segDisplay+0x1e8>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	4619      	mov	r1, r3
 8001486:	4817      	ldr	r0, [pc, #92]	; (80014e4 <led7segDisplay+0x1ec>)
 8001488:	f000 ff71 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_SET);
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <led7segDisplay+0x1e8>)
 800148e:	885b      	ldrh	r3, [r3, #2]
 8001490:	2201      	movs	r2, #1
 8001492:	4619      	mov	r1, r3
 8001494:	4813      	ldr	r0, [pc, #76]	; (80014e4 <led7segDisplay+0x1ec>)
 8001496:	f000 ff6a 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_SET);
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <led7segDisplay+0x1e8>)
 800149c:	889b      	ldrh	r3, [r3, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	4810      	ldr	r0, [pc, #64]	; (80014e4 <led7segDisplay+0x1ec>)
 80014a4:	f000 ff63 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_RESET);
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <led7segDisplay+0x1e8>)
 80014aa:	88db      	ldrh	r3, [r3, #6]
 80014ac:	2200      	movs	r2, #0
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <led7segDisplay+0x1ec>)
 80014b2:	f000 ff5c 	bl	800236e <HAL_GPIO_WritePin>
            break;
 80014b6:	e004      	b.n	80014c2 <led7segDisplay+0x1ca>
    if (index < 0 || index >= LED7SEG_BLOCK_NUMBER) return;
 80014b8:	bf00      	nop
 80014ba:	e002      	b.n	80014c2 <led7segDisplay+0x1ca>
    if (offset < 0 || offset >= LED7SEG_DIGIT_NUMBER) return;
 80014bc:	bf00      	nop
 80014be:	e000      	b.n	80014c2 <led7segDisplay+0x1ca>
        default:
            break;
 80014c0:	bf00      	nop
    }
}
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	200000fc 	.word	0x200000fc
 80014cc:	40240000 	.word	0x40240000
 80014d0:	66666667 	.word	0x66666667
 80014d4:	20000028 	.word	0x20000028
 80014d8:	40010800 	.word	0x40010800
 80014dc:	20000010 	.word	0x20000010
 80014e0:	20000008 	.word	0x20000008
 80014e4:	40010c00 	.word	0x40010c00

080014e8 <led7segInit>:

void led7segInit(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
    timerSet(LED7SEG_SCANNING_DURATION / TIMER_DURATION, 0);
 80014ec:	2100      	movs	r1, #0
 80014ee:	2019      	movs	r0, #25
 80014f0:	f000 fb34 	bl	8001b5c <timerSet>
    HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_SET);
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <led7segInit+0x48>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	4619      	mov	r1, r3
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <led7segInit+0x4c>)
 80014fe:	f000 ff36 	bl	800236e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_SET);
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <led7segInit+0x48>)
 8001504:	885b      	ldrh	r3, [r3, #2]
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <led7segInit+0x4c>)
 800150c:	f000 ff2f 	bl	800236e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_SET);
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <led7segInit+0x48>)
 8001512:	889b      	ldrh	r3, [r3, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	4619      	mov	r1, r3
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <led7segInit+0x4c>)
 800151a:	f000 ff28 	bl	800236e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_SET);
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <led7segInit+0x48>)
 8001520:	88db      	ldrh	r3, [r3, #6]
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <led7segInit+0x4c>)
 8001528:	f000 ff21 	bl	800236e <HAL_GPIO_WritePin>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000008 	.word	0x20000008
 8001534:	40010c00 	.word	0x40010c00

08001538 <led7segScanning>:
void led7segUpdate(int num, int index) {
    if (num < 0 || num >= pow(10, LED7SEG_DIGIT_NUMBER) || index < 0 || index >= LED7SEG_BLOCK_NUMBER) return;
    led7segNumbers[index] = num;
}

void led7segScanning(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
    led7segDisplay(led7segIndex, led7segOffset);
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <led7segScanning+0x58>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <led7segScanning+0x5c>)
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fed6 	bl	80012f8 <led7segDisplay>
    if (timerFlags[0] == 1) {
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <led7segScanning+0x60>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d11b      	bne.n	800158c <led7segScanning+0x54>
        timerSet(LED7SEG_SCANNING_DURATION / TIMER_DURATION, 0);
 8001554:	2100      	movs	r1, #0
 8001556:	2019      	movs	r0, #25
 8001558:	f000 fb00 	bl	8001b5c <timerSet>
        led7segOffset++;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <led7segScanning+0x5c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <led7segScanning+0x5c>)
 8001564:	6013      	str	r3, [r2, #0]
        if (led7segOffset >= LED7SEG_DIGIT_NUMBER) {
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <led7segScanning+0x5c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	dd07      	ble.n	800157e <led7segScanning+0x46>
            led7segOffset = 0;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <led7segScanning+0x5c>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
            led7segIndex++;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <led7segScanning+0x58>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <led7segScanning+0x58>)
 800157c:	6013      	str	r3, [r2, #0]
        }
        if (led7segIndex >= LED7SEG_BLOCK_NUMBER) {
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <led7segScanning+0x58>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	dd02      	ble.n	800158c <led7segScanning+0x54>
            led7segIndex = 0;
 8001586:	4b02      	ldr	r3, [pc, #8]	; (8001590 <led7segScanning+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
        }
    }
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000104 	.word	0x20000104
 8001594:	20000108 	.word	0x20000108
 8001598:	2000016c 	.word	0x2000016c

0800159c <trafficInit>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficAmberPins[TRAFFIC_NUMBER] = {TRAFFIC0_AMBER_Pin, TRAFFIC1_AMBER_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};

void trafficInit(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
    trafficRedDuration = 5;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <trafficInit+0x2c>)
 80015a2:	2205      	movs	r2, #5
 80015a4:	601a      	str	r2, [r3, #0]
    trafficAmberDuration = 2;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <trafficInit+0x30>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	601a      	str	r2, [r3, #0]
    trafficGreenDuration = 3;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <trafficInit+0x34>)
 80015ae:	2203      	movs	r2, #3
 80015b0:	601a      	str	r2, [r3, #0]
    trafficReInit(TRAFFIC_OFF, 0);
 80015b2:	2100      	movs	r1, #0
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f80d 	bl	80015d4 <trafficReInit>
    trafficReInit(TRAFFIC_OFF, 1);
 80015ba:	2101      	movs	r1, #1
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 f809 	bl	80015d4 <trafficReInit>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000010c 	.word	0x2000010c
 80015cc:	20000110 	.word	0x20000110
 80015d0:	20000114 	.word	0x20000114

080015d4 <trafficReInit>:

void trafficReInit(enum TRAFFIC_STATE state, int index) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
    if (index < 0 || index >= TRAFFIC_NUMBER) return;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f2c0 8098 	blt.w	8001718 <trafficReInit+0x144>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	f300 8094 	bgt.w	8001718 <trafficReInit+0x144>

    switch (state) {
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	f200 8092 	bhi.w	800171c <trafficReInit+0x148>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <trafficReInit+0x2c>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001611 	.word	0x08001611
 8001604:	08001653 	.word	0x08001653
 8001608:	08001695 	.word	0x08001695
 800160c:	080016d7 	.word	0x080016d7
        case TRAFFIC_OFF:
            HAL_GPIO_WritePin(GPIOB, trafficRedPins[index], GPIO_PIN_SET);
 8001610:	4a44      	ldr	r2, [pc, #272]	; (8001724 <trafficReInit+0x150>)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001618:	2201      	movs	r2, #1
 800161a:	4619      	mov	r1, r3
 800161c:	4842      	ldr	r0, [pc, #264]	; (8001728 <trafficReInit+0x154>)
 800161e:	f000 fea6 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, trafficAmberPins[index], GPIO_PIN_SET);
 8001622:	4a42      	ldr	r2, [pc, #264]	; (800172c <trafficReInit+0x158>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	483e      	ldr	r0, [pc, #248]	; (8001728 <trafficReInit+0x154>)
 8001630:	f000 fe9d 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, trafficGreenPins[index], GPIO_PIN_SET);
 8001634:	4a3e      	ldr	r2, [pc, #248]	; (8001730 <trafficReInit+0x15c>)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800163c:	2201      	movs	r2, #1
 800163e:	4619      	mov	r1, r3
 8001640:	4839      	ldr	r0, [pc, #228]	; (8001728 <trafficReInit+0x154>)
 8001642:	f000 fe94 	bl	800236e <HAL_GPIO_WritePin>
            trafficState[index] = TRAFFIC_OFF;
 8001646:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <trafficReInit+0x160>)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4413      	add	r3, r2
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
            break;
 8001650:	e065      	b.n	800171e <trafficReInit+0x14a>

        case TRAFFIC_RED:
            HAL_GPIO_WritePin(GPIOB, trafficRedPins[index], GPIO_PIN_RESET);
 8001652:	4a34      	ldr	r2, [pc, #208]	; (8001724 <trafficReInit+0x150>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4832      	ldr	r0, [pc, #200]	; (8001728 <trafficReInit+0x154>)
 8001660:	f000 fe85 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, trafficAmberPins[index], GPIO_PIN_SET);
 8001664:	4a31      	ldr	r2, [pc, #196]	; (800172c <trafficReInit+0x158>)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	482d      	ldr	r0, [pc, #180]	; (8001728 <trafficReInit+0x154>)
 8001672:	f000 fe7c 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, trafficGreenPins[index], GPIO_PIN_SET);
 8001676:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <trafficReInit+0x15c>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167e:	2201      	movs	r2, #1
 8001680:	4619      	mov	r1, r3
 8001682:	4829      	ldr	r0, [pc, #164]	; (8001728 <trafficReInit+0x154>)
 8001684:	f000 fe73 	bl	800236e <HAL_GPIO_WritePin>
            trafficState[index] = TRAFFIC_RED;
 8001688:	4a2a      	ldr	r2, [pc, #168]	; (8001734 <trafficReInit+0x160>)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	4413      	add	r3, r2
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
            break;
 8001692:	e044      	b.n	800171e <trafficReInit+0x14a>

        case TRAFFIC_AMBER:
            HAL_GPIO_WritePin(GPIOB, trafficRedPins[index], GPIO_PIN_SET);
 8001694:	4a23      	ldr	r2, [pc, #140]	; (8001724 <trafficReInit+0x150>)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800169c:	2201      	movs	r2, #1
 800169e:	4619      	mov	r1, r3
 80016a0:	4821      	ldr	r0, [pc, #132]	; (8001728 <trafficReInit+0x154>)
 80016a2:	f000 fe64 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, trafficAmberPins[index], GPIO_PIN_RESET);
 80016a6:	4a21      	ldr	r2, [pc, #132]	; (800172c <trafficReInit+0x158>)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	481d      	ldr	r0, [pc, #116]	; (8001728 <trafficReInit+0x154>)
 80016b4:	f000 fe5b 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, trafficGreenPins[index], GPIO_PIN_SET);
 80016b8:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <trafficReInit+0x15c>)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c0:	2201      	movs	r2, #1
 80016c2:	4619      	mov	r1, r3
 80016c4:	4818      	ldr	r0, [pc, #96]	; (8001728 <trafficReInit+0x154>)
 80016c6:	f000 fe52 	bl	800236e <HAL_GPIO_WritePin>
            trafficState[index] = TRAFFIC_AMBER;
 80016ca:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <trafficReInit+0x160>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	2202      	movs	r2, #2
 80016d2:	701a      	strb	r2, [r3, #0]
            break;
 80016d4:	e023      	b.n	800171e <trafficReInit+0x14a>

        case TRAFFIC_GREEN:
            HAL_GPIO_WritePin(GPIOB, trafficRedPins[index], GPIO_PIN_SET);
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <trafficReInit+0x150>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016de:	2201      	movs	r2, #1
 80016e0:	4619      	mov	r1, r3
 80016e2:	4811      	ldr	r0, [pc, #68]	; (8001728 <trafficReInit+0x154>)
 80016e4:	f000 fe43 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, trafficAmberPins[index], GPIO_PIN_SET);
 80016e8:	4a10      	ldr	r2, [pc, #64]	; (800172c <trafficReInit+0x158>)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016f0:	2201      	movs	r2, #1
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <trafficReInit+0x154>)
 80016f6:	f000 fe3a 	bl	800236e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, trafficGreenPins[index], GPIO_PIN_RESET);
 80016fa:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <trafficReInit+0x15c>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	4808      	ldr	r0, [pc, #32]	; (8001728 <trafficReInit+0x154>)
 8001708:	f000 fe31 	bl	800236e <HAL_GPIO_WritePin>
            trafficState[index] = TRAFFIC_GREEN;
 800170c:	4a09      	ldr	r2, [pc, #36]	; (8001734 <trafficReInit+0x160>)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	2203      	movs	r2, #3
 8001714:	701a      	strb	r2, [r3, #0]
            break;
 8001716:	e002      	b.n	800171e <trafficReInit+0x14a>
    if (index < 0 || index >= TRAFFIC_NUMBER) return;
 8001718:	bf00      	nop
 800171a:	e000      	b.n	800171e <trafficReInit+0x14a>

        default:
            break;
 800171c:	bf00      	nop
    }
}
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000040 	.word	0x20000040
 8001728:	40010c00 	.word	0x40010c00
 800172c:	20000044 	.word	0x20000044
 8001730:	20000048 	.word	0x20000048
 8001734:	20000118 	.word	0x20000118

08001738 <fsmInit>:
#include "processing_fsm.h"


enum FSM_STATE fsmState = 0;

void fsmInit(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
    trafficInit();
 800173c:	f7ff ff2e 	bl	800159c <trafficInit>
    fsmReInit(FSM_NORMAL);
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f803 	bl	800174c <fsmReInit>
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <fsmReInit>:

void fsmReInit(enum FSM_STATE state) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d87a      	bhi.n	8001852 <fsmReInit+0x106>
 800175c:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <fsmReInit+0x18>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	08001775 	.word	0x08001775
 8001768:	080017c9 	.word	0x080017c9
 800176c:	080017f7 	.word	0x080017f7
 8001770:	08001825 	.word	0x08001825
        case FSM_NORMAL:
            timerSet(TRAFFIC_SECOND_DURATION / TIMER_DURATION, 1);
 8001774:	2101      	movs	r1, #1
 8001776:	2064      	movs	r0, #100	; 0x64
 8001778:	f000 f9f0 	bl	8001b5c <timerSet>
            timerSet(trafficRedDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 800177c:	4b37      	ldr	r3, [pc, #220]	; (800185c <fsmReInit+0x110>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2264      	movs	r2, #100	; 0x64
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	2102      	movs	r1, #2
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f9e7 	bl	8001b5c <timerSet>
            timerSet(trafficGreenDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <fsmReInit+0x114>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2264      	movs	r2, #100	; 0x64
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	2103      	movs	r1, #3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f9de 	bl	8001b5c <timerSet>
            led7segNumbers[0] = trafficRedDuration;
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <fsmReInit+0x110>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <fsmReInit+0x118>)
 80017a6:	6013      	str	r3, [r2, #0]
            led7segNumbers[1] = trafficGreenDuration;
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <fsmReInit+0x114>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <fsmReInit+0x118>)
 80017ae:	6053      	str	r3, [r2, #4]
            trafficReInit(TRAFFIC_RED, 0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7ff ff0e 	bl	80015d4 <trafficReInit>
            trafficReInit(TRAFFIC_GREEN, 1);
 80017b8:	2101      	movs	r1, #1
 80017ba:	2003      	movs	r0, #3
 80017bc:	f7ff ff0a 	bl	80015d4 <trafficReInit>
            fsmState = FSM_NORMAL;
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <fsmReInit+0x11c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
            break;
 80017c6:	e045      	b.n	8001854 <fsmReInit+0x108>

        case FSM_RED_MOD:
            timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80017c8:	2101      	movs	r1, #1
 80017ca:	2019      	movs	r0, #25
 80017cc:	f000 f9c6 	bl	8001b5c <timerSet>
            led7segNumbers[0] = 2;
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <fsmReInit+0x118>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	601a      	str	r2, [r3, #0]
            led7segNumbers[1] = trafficRedDuration;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <fsmReInit+0x110>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a22      	ldr	r2, [pc, #136]	; (8001864 <fsmReInit+0x118>)
 80017dc:	6053      	str	r3, [r2, #4]
            trafficReInit(TRAFFIC_OFF, 0);
 80017de:	2100      	movs	r1, #0
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fef7 	bl	80015d4 <trafficReInit>
            trafficReInit(TRAFFIC_OFF, 1);
 80017e6:	2101      	movs	r1, #1
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fef3 	bl	80015d4 <trafficReInit>
            fsmState = FSM_RED_MOD;
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <fsmReInit+0x11c>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
            break;
 80017f4:	e02e      	b.n	8001854 <fsmReInit+0x108>

        case FSM_AMBER_MOD:
            timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80017f6:	2101      	movs	r1, #1
 80017f8:	2019      	movs	r0, #25
 80017fa:	f000 f9af 	bl	8001b5c <timerSet>
            led7segNumbers[0] = 3;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <fsmReInit+0x118>)
 8001800:	2203      	movs	r2, #3
 8001802:	601a      	str	r2, [r3, #0]
            led7segNumbers[1] = trafficAmberDuration;
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <fsmReInit+0x120>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <fsmReInit+0x118>)
 800180a:	6053      	str	r3, [r2, #4]
            trafficReInit(TRAFFIC_OFF, 0);
 800180c:	2100      	movs	r1, #0
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fee0 	bl	80015d4 <trafficReInit>
            trafficReInit(TRAFFIC_OFF, 1);
 8001814:	2101      	movs	r1, #1
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fedc 	bl	80015d4 <trafficReInit>
            fsmState = FSM_AMBER_MOD;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <fsmReInit+0x11c>)
 800181e:	2202      	movs	r2, #2
 8001820:	701a      	strb	r2, [r3, #0]
            break;
 8001822:	e017      	b.n	8001854 <fsmReInit+0x108>

        case FSM_GREEN_MOD:
            timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001824:	2101      	movs	r1, #1
 8001826:	2019      	movs	r0, #25
 8001828:	f000 f998 	bl	8001b5c <timerSet>
            led7segNumbers[0] = 4;
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <fsmReInit+0x118>)
 800182e:	2204      	movs	r2, #4
 8001830:	601a      	str	r2, [r3, #0]
            led7segNumbers[1] = trafficGreenDuration;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <fsmReInit+0x114>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <fsmReInit+0x118>)
 8001838:	6053      	str	r3, [r2, #4]
            trafficReInit(TRAFFIC_OFF, 0);
 800183a:	2100      	movs	r1, #0
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff fec9 	bl	80015d4 <trafficReInit>
            trafficReInit(TRAFFIC_OFF, 1);
 8001842:	2101      	movs	r1, #1
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff fec5 	bl	80015d4 <trafficReInit>
            fsmState = FSM_GREEN_MOD;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <fsmReInit+0x11c>)
 800184c:	2203      	movs	r2, #3
 800184e:	701a      	strb	r2, [r3, #0]
            break;
 8001850:	e000      	b.n	8001854 <fsmReInit+0x108>

        default:
            break;
 8001852:	bf00      	nop
    }
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000010c 	.word	0x2000010c
 8001860:	20000114 	.word	0x20000114
 8001864:	200000fc 	.word	0x200000fc
 8001868:	2000011a 	.word	0x2000011a
 800186c:	20000110 	.word	0x20000110

08001870 <fsmProcessing>:

void fsmProcessing(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
    switch (fsmState) {
 8001874:	4bb2      	ldr	r3, [pc, #712]	; (8001b40 <fsmProcessing+0x2d0>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b03      	cmp	r3, #3
 800187a:	f200 8156 	bhi.w	8001b2a <fsmProcessing+0x2ba>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <fsmProcessing+0x14>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08001895 	.word	0x08001895
 8001888:	08001a0b 	.word	0x08001a0b
 800188c:	08001a6b 	.word	0x08001a6b
 8001890:	08001acb 	.word	0x08001acb
        case FSM_NORMAL:
            if (timerFlags[1] == 1) {
 8001894:	4bab      	ldr	r3, [pc, #684]	; (8001b44 <fsmProcessing+0x2d4>)
 8001896:	785b      	ldrb	r3, [r3, #1]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d11b      	bne.n	80018d4 <fsmProcessing+0x64>
                timerSet(TRAFFIC_SECOND_DURATION / TIMER_DURATION, 1);
 800189c:	2101      	movs	r1, #1
 800189e:	2064      	movs	r0, #100	; 0x64
 80018a0:	f000 f95c 	bl	8001b5c <timerSet>
                led7segNumbers[0]--;
 80018a4:	4ba8      	ldr	r3, [pc, #672]	; (8001b48 <fsmProcessing+0x2d8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	4aa7      	ldr	r2, [pc, #668]	; (8001b48 <fsmProcessing+0x2d8>)
 80018ac:	6013      	str	r3, [r2, #0]
                if (led7segNumbers[0] < 0) led7segNumbers[0] = 0;
 80018ae:	4ba6      	ldr	r3, [pc, #664]	; (8001b48 <fsmProcessing+0x2d8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da02      	bge.n	80018bc <fsmProcessing+0x4c>
 80018b6:	4ba4      	ldr	r3, [pc, #656]	; (8001b48 <fsmProcessing+0x2d8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
                led7segNumbers[1]--;
 80018bc:	4ba2      	ldr	r3, [pc, #648]	; (8001b48 <fsmProcessing+0x2d8>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	4aa1      	ldr	r2, [pc, #644]	; (8001b48 <fsmProcessing+0x2d8>)
 80018c4:	6053      	str	r3, [r2, #4]
                if (led7segNumbers[1] < 0) led7segNumbers[1] = 0;
 80018c6:	4ba0      	ldr	r3, [pc, #640]	; (8001b48 <fsmProcessing+0x2d8>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da02      	bge.n	80018d4 <fsmProcessing+0x64>
 80018ce:	4b9e      	ldr	r3, [pc, #632]	; (8001b48 <fsmProcessing+0x2d8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	605a      	str	r2, [r3, #4]
            }

            if (timerFlags[2] == 1) {
 80018d4:	4b9b      	ldr	r3, [pc, #620]	; (8001b44 <fsmProcessing+0x2d4>)
 80018d6:	789b      	ldrb	r3, [r3, #2]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d140      	bne.n	800195e <fsmProcessing+0xee>
                switch (trafficState[0]) {
 80018dc:	4b9b      	ldr	r3, [pc, #620]	; (8001b4c <fsmProcessing+0x2dc>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d02a      	beq.n	800193a <fsmProcessing+0xca>
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	dc3c      	bgt.n	8001962 <fsmProcessing+0xf2>
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d002      	beq.n	80018f2 <fsmProcessing+0x82>
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d012      	beq.n	8001916 <fsmProcessing+0xa6>
                        led7segNumbers[0] = trafficAmberDuration;
                        trafficReInit(TRAFFIC_AMBER, 0);
                        break;

                    default:
                        break;
 80018f0:	e037      	b.n	8001962 <fsmProcessing+0xf2>
                        timerSet(trafficGreenDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 80018f2:	4b97      	ldr	r3, [pc, #604]	; (8001b50 <fsmProcessing+0x2e0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2264      	movs	r2, #100	; 0x64
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	2102      	movs	r1, #2
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f92c 	bl	8001b5c <timerSet>
                        led7segNumbers[0] = trafficGreenDuration;
 8001904:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <fsmProcessing+0x2e0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a8f      	ldr	r2, [pc, #572]	; (8001b48 <fsmProcessing+0x2d8>)
 800190a:	6013      	str	r3, [r2, #0]
                        trafficReInit(TRAFFIC_GREEN, 0);
 800190c:	2100      	movs	r1, #0
 800190e:	2003      	movs	r0, #3
 8001910:	f7ff fe60 	bl	80015d4 <trafficReInit>
                        break;
 8001914:	e026      	b.n	8001964 <fsmProcessing+0xf4>
                        timerSet(trafficRedDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 8001916:	4b8f      	ldr	r3, [pc, #572]	; (8001b54 <fsmProcessing+0x2e4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2264      	movs	r2, #100	; 0x64
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	2102      	movs	r1, #2
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f91a 	bl	8001b5c <timerSet>
                        led7segNumbers[0] = trafficRedDuration;
 8001928:	4b8a      	ldr	r3, [pc, #552]	; (8001b54 <fsmProcessing+0x2e4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a86      	ldr	r2, [pc, #536]	; (8001b48 <fsmProcessing+0x2d8>)
 800192e:	6013      	str	r3, [r2, #0]
                        trafficReInit(TRAFFIC_RED, 0);
 8001930:	2100      	movs	r1, #0
 8001932:	2001      	movs	r0, #1
 8001934:	f7ff fe4e 	bl	80015d4 <trafficReInit>
                        break;
 8001938:	e014      	b.n	8001964 <fsmProcessing+0xf4>
                        timerSet(trafficAmberDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 800193a:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <fsmProcessing+0x2e8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2264      	movs	r2, #100	; 0x64
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	2102      	movs	r1, #2
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f908 	bl	8001b5c <timerSet>
                        led7segNumbers[0] = trafficAmberDuration;
 800194c:	4b82      	ldr	r3, [pc, #520]	; (8001b58 <fsmProcessing+0x2e8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a7d      	ldr	r2, [pc, #500]	; (8001b48 <fsmProcessing+0x2d8>)
 8001952:	6013      	str	r3, [r2, #0]
                        trafficReInit(TRAFFIC_AMBER, 0);
 8001954:	2100      	movs	r1, #0
 8001956:	2002      	movs	r0, #2
 8001958:	f7ff fe3c 	bl	80015d4 <trafficReInit>
                        break;
 800195c:	e002      	b.n	8001964 <fsmProcessing+0xf4>
                }
            }
 800195e:	bf00      	nop
 8001960:	e000      	b.n	8001964 <fsmProcessing+0xf4>
                        break;
 8001962:	bf00      	nop

            if (timerFlags[3] == 1) {
 8001964:	4b77      	ldr	r3, [pc, #476]	; (8001b44 <fsmProcessing+0x2d4>)
 8001966:	78db      	ldrb	r3, [r3, #3]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d140      	bne.n	80019ee <fsmProcessing+0x17e>
                switch (trafficState[1]) {
 800196c:	4b77      	ldr	r3, [pc, #476]	; (8001b4c <fsmProcessing+0x2dc>)
 800196e:	785b      	ldrb	r3, [r3, #1]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d02a      	beq.n	80019ca <fsmProcessing+0x15a>
 8001974:	2b03      	cmp	r3, #3
 8001976:	dc3c      	bgt.n	80019f2 <fsmProcessing+0x182>
 8001978:	2b01      	cmp	r3, #1
 800197a:	d002      	beq.n	8001982 <fsmProcessing+0x112>
 800197c:	2b02      	cmp	r3, #2
 800197e:	d012      	beq.n	80019a6 <fsmProcessing+0x136>
                        led7segNumbers[1] = trafficAmberDuration;
                        trafficReInit(TRAFFIC_AMBER, 1);
                        break;

                    default:
                        break;
 8001980:	e037      	b.n	80019f2 <fsmProcessing+0x182>
                        timerSet(trafficGreenDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 8001982:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <fsmProcessing+0x2e0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2264      	movs	r2, #100	; 0x64
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	2103      	movs	r1, #3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f8e4 	bl	8001b5c <timerSet>
                        led7segNumbers[1] = trafficGreenDuration;
 8001994:	4b6e      	ldr	r3, [pc, #440]	; (8001b50 <fsmProcessing+0x2e0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a6b      	ldr	r2, [pc, #428]	; (8001b48 <fsmProcessing+0x2d8>)
 800199a:	6053      	str	r3, [r2, #4]
                        trafficReInit(TRAFFIC_GREEN, 1);
 800199c:	2101      	movs	r1, #1
 800199e:	2003      	movs	r0, #3
 80019a0:	f7ff fe18 	bl	80015d4 <trafficReInit>
                        break;
 80019a4:	e026      	b.n	80019f4 <fsmProcessing+0x184>
                        timerSet(trafficRedDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 80019a6:	4b6b      	ldr	r3, [pc, #428]	; (8001b54 <fsmProcessing+0x2e4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2264      	movs	r2, #100	; 0x64
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	2103      	movs	r1, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f8d2 	bl	8001b5c <timerSet>
                        led7segNumbers[1] = trafficRedDuration;
 80019b8:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <fsmProcessing+0x2e4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a62      	ldr	r2, [pc, #392]	; (8001b48 <fsmProcessing+0x2d8>)
 80019be:	6053      	str	r3, [r2, #4]
                        trafficReInit(TRAFFIC_RED, 1);
 80019c0:	2101      	movs	r1, #1
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff fe06 	bl	80015d4 <trafficReInit>
                        break;
 80019c8:	e014      	b.n	80019f4 <fsmProcessing+0x184>
                        timerSet(trafficAmberDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 80019ca:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <fsmProcessing+0x2e8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2264      	movs	r2, #100	; 0x64
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	2103      	movs	r1, #3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f8c0 	bl	8001b5c <timerSet>
                        led7segNumbers[1] = trafficAmberDuration;
 80019dc:	4b5e      	ldr	r3, [pc, #376]	; (8001b58 <fsmProcessing+0x2e8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a59      	ldr	r2, [pc, #356]	; (8001b48 <fsmProcessing+0x2d8>)
 80019e2:	6053      	str	r3, [r2, #4]
                        trafficReInit(TRAFFIC_AMBER, 1);
 80019e4:	2101      	movs	r1, #1
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff fdf4 	bl	80015d4 <trafficReInit>
                        break;
 80019ec:	e002      	b.n	80019f4 <fsmProcessing+0x184>
                }
            }
 80019ee:	bf00      	nop
 80019f0:	e000      	b.n	80019f4 <fsmProcessing+0x184>
                        break;
 80019f2:	bf00      	nop

            if (buttonPressed(0)) {
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff f8dd 	bl	8000bb4 <buttonPressed>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 8096 	beq.w	8001b2e <fsmProcessing+0x2be>
                fsmReInit(FSM_RED_MOD);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff fea2 	bl	800174c <fsmReInit>
            }
            break;
 8001a08:	e091      	b.n	8001b2e <fsmProcessing+0x2be>

        case FSM_RED_MOD:
            if (timerFlags[1] == 1) {
 8001a0a:	4b4e      	ldr	r3, [pc, #312]	; (8001b44 <fsmProcessing+0x2d4>)
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d120      	bne.n	8001a54 <fsmProcessing+0x1e4>
                switch (trafficState[0]) {
 8001a12:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <fsmProcessing+0x2dc>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <fsmProcessing+0x1b0>
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d00d      	beq.n	8001a3a <fsmProcessing+0x1ca>
                        trafficReInit(TRAFFIC_OFF, 0);
                        trafficReInit(TRAFFIC_OFF, 1);
                        break;

                    default:
                        break;
 8001a1e:	e01a      	b.n	8001a56 <fsmProcessing+0x1e6>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001a20:	2101      	movs	r1, #1
 8001a22:	2019      	movs	r0, #25
 8001a24:	f000 f89a 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_RED, 0);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f7ff fdd2 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_RED, 1);
 8001a30:	2101      	movs	r1, #1
 8001a32:	2001      	movs	r0, #1
 8001a34:	f7ff fdce 	bl	80015d4 <trafficReInit>
                        break;
 8001a38:	e00d      	b.n	8001a56 <fsmProcessing+0x1e6>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	2019      	movs	r0, #25
 8001a3e:	f000 f88d 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_OFF, 0);
 8001a42:	2100      	movs	r1, #0
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff fdc5 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_OFF, 1);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fdc1 	bl	80015d4 <trafficReInit>
                        break;
 8001a52:	e000      	b.n	8001a56 <fsmProcessing+0x1e6>
                }
            }
 8001a54:	bf00      	nop

            if (buttonPressed(0)) {
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff f8ac 	bl	8000bb4 <buttonPressed>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d067      	beq.n	8001b32 <fsmProcessing+0x2c2>
                fsmReInit(FSM_AMBER_MOD);
 8001a62:	2002      	movs	r0, #2
 8001a64:	f7ff fe72 	bl	800174c <fsmReInit>
            }
            break;
 8001a68:	e063      	b.n	8001b32 <fsmProcessing+0x2c2>

        case FSM_AMBER_MOD:
            if (timerFlags[1] == 1) {
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <fsmProcessing+0x2d4>)
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d120      	bne.n	8001ab4 <fsmProcessing+0x244>
                switch (trafficState[0]) {
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <fsmProcessing+0x2dc>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <fsmProcessing+0x210>
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d00d      	beq.n	8001a9a <fsmProcessing+0x22a>
                        trafficReInit(TRAFFIC_OFF, 0);
                        trafficReInit(TRAFFIC_OFF, 1);
                        break;

                    default:
                        break;
 8001a7e:	e01a      	b.n	8001ab6 <fsmProcessing+0x246>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001a80:	2101      	movs	r1, #1
 8001a82:	2019      	movs	r0, #25
 8001a84:	f000 f86a 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_AMBER, 0);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f7ff fda2 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_AMBER, 1);
 8001a90:	2101      	movs	r1, #1
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7ff fd9e 	bl	80015d4 <trafficReInit>
                        break;
 8001a98:	e00d      	b.n	8001ab6 <fsmProcessing+0x246>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2019      	movs	r0, #25
 8001a9e:	f000 f85d 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_OFF, 0);
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff fd95 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_OFF, 1);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fd91 	bl	80015d4 <trafficReInit>
                        break;
 8001ab2:	e000      	b.n	8001ab6 <fsmProcessing+0x246>
                }
            }
 8001ab4:	bf00      	nop

            if (buttonPressed(0)) {
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff f87c 	bl	8000bb4 <buttonPressed>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d039      	beq.n	8001b36 <fsmProcessing+0x2c6>
                fsmReInit(FSM_GREEN_MOD);
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	f7ff fe42 	bl	800174c <fsmReInit>
            }
            break;
 8001ac8:	e035      	b.n	8001b36 <fsmProcessing+0x2c6>

        case FSM_GREEN_MOD:
            if (timerFlags[1] == 1) {
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <fsmProcessing+0x2d4>)
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d120      	bne.n	8001b14 <fsmProcessing+0x2a4>
                switch (trafficState[0]) {
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <fsmProcessing+0x2dc>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <fsmProcessing+0x270>
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d00d      	beq.n	8001afa <fsmProcessing+0x28a>
                        trafficReInit(TRAFFIC_OFF, 0);
                        trafficReInit(TRAFFIC_OFF, 1);
                        break;

                    default:
                        break;
 8001ade:	e01a      	b.n	8001b16 <fsmProcessing+0x2a6>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	2019      	movs	r0, #25
 8001ae4:	f000 f83a 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_GREEN, 0);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2003      	movs	r0, #3
 8001aec:	f7ff fd72 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_GREEN, 1);
 8001af0:	2101      	movs	r1, #1
 8001af2:	2003      	movs	r0, #3
 8001af4:	f7ff fd6e 	bl	80015d4 <trafficReInit>
                        break;
 8001af8:	e00d      	b.n	8001b16 <fsmProcessing+0x2a6>
                        timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001afa:	2101      	movs	r1, #1
 8001afc:	2019      	movs	r0, #25
 8001afe:	f000 f82d 	bl	8001b5c <timerSet>
                        trafficReInit(TRAFFIC_OFF, 0);
 8001b02:	2100      	movs	r1, #0
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff fd65 	bl	80015d4 <trafficReInit>
                        trafficReInit(TRAFFIC_OFF, 1);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fd61 	bl	80015d4 <trafficReInit>
                        break;
 8001b12:	e000      	b.n	8001b16 <fsmProcessing+0x2a6>
                }
            }
 8001b14:	bf00      	nop

            if (buttonPressed(0)) {
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff f84c 	bl	8000bb4 <buttonPressed>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <fsmProcessing+0x2ca>
                fsmReInit(FSM_NORMAL);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fe12 	bl	800174c <fsmReInit>
            }
            break;
 8001b28:	e007      	b.n	8001b3a <fsmProcessing+0x2ca>

        default:
            break;
 8001b2a:	bf00      	nop
 8001b2c:	e006      	b.n	8001b3c <fsmProcessing+0x2cc>
            break;
 8001b2e:	bf00      	nop
 8001b30:	e004      	b.n	8001b3c <fsmProcessing+0x2cc>
            break;
 8001b32:	bf00      	nop
 8001b34:	e002      	b.n	8001b3c <fsmProcessing+0x2cc>
            break;
 8001b36:	bf00      	nop
 8001b38:	e000      	b.n	8001b3c <fsmProcessing+0x2cc>
            break;
 8001b3a:	bf00      	nop
    }
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000011a 	.word	0x2000011a
 8001b44:	2000016c 	.word	0x2000016c
 8001b48:	200000fc 	.word	0x200000fc
 8001b4c:	20000118 	.word	0x20000118
 8001b50:	20000114 	.word	0x20000114
 8001b54:	2000010c 	.word	0x2000010c
 8001b58:	20000110 	.word	0x20000110

08001b5c <timerSet>:
#include "software_timer.h"

uint8_t timerFlags[TIMER_NUMBER];
static int16_t timerCounters[TIMER_NUMBER];

void timerSet(int duration, int index) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
    if (index >= 0 && index < TIMER_NUMBER) {
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0d      	blt.n	8001b88 <timerSet+0x2c>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	dc0a      	bgt.n	8001b88 <timerSet+0x2c>
        timerCounters[index] = duration;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	b219      	sxth	r1, r3
 8001b76:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <timerSet+0x38>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        timerFlags[index] = 0;
 8001b7e:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <timerSet+0x3c>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
    }
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2000011c 	.word	0x2000011c
 8001b98:	2000016c 	.word	0x2000016c

08001b9c <timerRun>:

void timerRun(void) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
    for (int i = 0; i < TIMER_NUMBER; i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	e01f      	b.n	8001be8 <timerRun+0x4c>
        if (timerCounters[i] > 0) {
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <timerRun+0x60>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	dd16      	ble.n	8001be2 <timerRun+0x46>
            timerCounters[i]--;
 8001bb4:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <timerRun+0x60>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	b219      	sxth	r1, r3
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <timerRun+0x60>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (timerCounters[i] <= 0) {
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <timerRun+0x60>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	dc04      	bgt.n	8001be2 <timerRun+0x46>
                timerFlags[i] = 1;
 8001bd8:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <timerRun+0x64>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < TIMER_NUMBER; i++) {
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3301      	adds	r3, #1
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	dddc      	ble.n	8001ba8 <timerRun+0xc>
            }
        }
    }
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	2000011c 	.word	0x2000011c
 8001c00:	2000016c 	.word	0x2000016c

08001c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_MspInit+0x60>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_MspInit+0x60>)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000

08001c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c78:	d113      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_TIM_Base_MspInit+0x44>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <HAL_TIM_Base_MspInit+0x44>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_TIM_Base_MspInit+0x44>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	201c      	movs	r0, #28
 8001c98:	f000 f9a1 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c9c:	201c      	movs	r0, #28
 8001c9e:	f000 f9ba 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf6:	f000 f87f 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <TIM2_IRQHandler+0x10>)
 8001d06:	f000 ffc3 	bl	8002c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000124 	.word	0x20000124

08001d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d20:	f7ff fff8 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d26:	490c      	ldr	r1, [pc, #48]	; (8001d58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d3c:	4c09      	ldr	r4, [pc, #36]	; (8001d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f001 fae7 	bl	800331c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4e:	f7fe ff53 	bl	8000bf8 <main>
  bx lr
 8001d52:	4770      	bx	lr
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001d5c:	08004320 	.word	0x08004320
  ldr r2, =_sbss
 8001d60:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001d64:	20000174 	.word	0x20000174

08001d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC1_2_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x28>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x28>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f923 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff ff3c 	bl	8001c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f93b 	bl	8002032 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 f903 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2000004c 	.word	0x2000004c
 8001df0:	20000054 	.word	0x20000054
 8001df4:	20000050 	.word	0x20000050

08001df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_IncTick+0x1c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_IncTick+0x20>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_IncTick+0x20>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000054 	.word	0x20000054
 8001e18:	20000170 	.word	0x20000170

08001e1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_GetTick+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20000170 	.word	0x20000170

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4906      	ldr	r1, [pc, #24]	; (8001ec8 <__NVIC_EnableIRQ+0x34>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	; (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff90 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff2d 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff42 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff90 	bl	8001f20 <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5f 	bl	8001ecc <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff35 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	; 0x2c
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	e148      	b.n	80022f2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002060:	2201      	movs	r2, #1
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8137 	bne.w	80022ec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4aa3      	ldr	r2, [pc, #652]	; (8002310 <HAL_GPIO_Init+0x2c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d05e      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 8002088:	4aa1      	ldr	r2, [pc, #644]	; (8002310 <HAL_GPIO_Init+0x2c4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d875      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 800208e:	4aa1      	ldr	r2, [pc, #644]	; (8002314 <HAL_GPIO_Init+0x2c8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d058      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 8002094:	4a9f      	ldr	r2, [pc, #636]	; (8002314 <HAL_GPIO_Init+0x2c8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d86f      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 800209a:	4a9f      	ldr	r2, [pc, #636]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d052      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 80020a0:	4a9d      	ldr	r2, [pc, #628]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d869      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020a6:	4a9d      	ldr	r2, [pc, #628]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d04c      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 80020ac:	4a9b      	ldr	r2, [pc, #620]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d863      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020b2:	4a9b      	ldr	r2, [pc, #620]	; (8002320 <HAL_GPIO_Init+0x2d4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d046      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 80020b8:	4a99      	ldr	r2, [pc, #612]	; (8002320 <HAL_GPIO_Init+0x2d4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d85d      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d82a      	bhi.n	8002118 <HAL_GPIO_Init+0xcc>
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	d859      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <HAL_GPIO_Init+0x80>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	08002147 	.word	0x08002147
 80020d0:	08002121 	.word	0x08002121
 80020d4:	08002133 	.word	0x08002133
 80020d8:	08002175 	.word	0x08002175
 80020dc:	0800217b 	.word	0x0800217b
 80020e0:	0800217b 	.word	0x0800217b
 80020e4:	0800217b 	.word	0x0800217b
 80020e8:	0800217b 	.word	0x0800217b
 80020ec:	0800217b 	.word	0x0800217b
 80020f0:	0800217b 	.word	0x0800217b
 80020f4:	0800217b 	.word	0x0800217b
 80020f8:	0800217b 	.word	0x0800217b
 80020fc:	0800217b 	.word	0x0800217b
 8002100:	0800217b 	.word	0x0800217b
 8002104:	0800217b 	.word	0x0800217b
 8002108:	0800217b 	.word	0x0800217b
 800210c:	0800217b 	.word	0x0800217b
 8002110:	08002129 	.word	0x08002129
 8002114:	0800213d 	.word	0x0800213d
 8002118:	4a82      	ldr	r2, [pc, #520]	; (8002324 <HAL_GPIO_Init+0x2d8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800211e:	e02c      	b.n	800217a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e029      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	3304      	adds	r3, #4
 800212e:	623b      	str	r3, [r7, #32]
          break;
 8002130:	e024      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	3308      	adds	r3, #8
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e01f      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	330c      	adds	r3, #12
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	e01a      	b.n	800217c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800214e:	2304      	movs	r3, #4
 8002150:	623b      	str	r3, [r7, #32]
          break;
 8002152:	e013      	b.n	800217c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800215c:	2308      	movs	r3, #8
 800215e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	611a      	str	r2, [r3, #16]
          break;
 8002166:	e009      	b.n	800217c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002168:	2308      	movs	r3, #8
 800216a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	615a      	str	r2, [r3, #20]
          break;
 8002172:	e003      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
          break;
 8002178:	e000      	b.n	800217c <HAL_GPIO_Init+0x130>
          break;
 800217a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d801      	bhi.n	8002186 <HAL_GPIO_Init+0x13a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	e001      	b.n	800218a <HAL_GPIO_Init+0x13e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d802      	bhi.n	8002198 <HAL_GPIO_Init+0x14c>
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x152>
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	3b08      	subs	r3, #8
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	210f      	movs	r1, #15
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	401a      	ands	r2, r3
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	431a      	orrs	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8090 	beq.w	80022ec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021cc:	4b56      	ldr	r3, [pc, #344]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a55      	ldr	r2, [pc, #340]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021e4:	4a51      	ldr	r2, [pc, #324]	; (800232c <HAL_GPIO_Init+0x2e0>)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a49      	ldr	r2, [pc, #292]	; (8002330 <HAL_GPIO_Init+0x2e4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00d      	beq.n	800222c <HAL_GPIO_Init+0x1e0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a48      	ldr	r2, [pc, #288]	; (8002334 <HAL_GPIO_Init+0x2e8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x1dc>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a47      	ldr	r2, [pc, #284]	; (8002338 <HAL_GPIO_Init+0x2ec>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_GPIO_Init+0x1d8>
 8002220:	2302      	movs	r3, #2
 8002222:	e004      	b.n	800222e <HAL_GPIO_Init+0x1e2>
 8002224:	2303      	movs	r3, #3
 8002226:	e002      	b.n	800222e <HAL_GPIO_Init+0x1e2>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_GPIO_Init+0x1e2>
 800222c:	2300      	movs	r3, #0
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	f002 0203 	and.w	r2, r2, #3
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	4093      	lsls	r3, r2
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800223e:	493b      	ldr	r1, [pc, #236]	; (800232c <HAL_GPIO_Init+0x2e0>)
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002258:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_GPIO_Init+0x2f0>)
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4937      	ldr	r1, [pc, #220]	; (800233c <HAL_GPIO_Init+0x2f0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	4933      	ldr	r1, [pc, #204]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002270:	4013      	ands	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	492d      	ldr	r1, [pc, #180]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4929      	ldr	r1, [pc, #164]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002298:	4013      	ands	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4923      	ldr	r1, [pc, #140]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022b6:	4b21      	ldr	r3, [pc, #132]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	491f      	ldr	r1, [pc, #124]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4919      	ldr	r1, [pc, #100]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4915      	ldr	r1, [pc, #84]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	3301      	adds	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f47f aeaf 	bne.w	8002060 <HAL_GPIO_Init+0x14>
  }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	372c      	adds	r7, #44	; 0x2c
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	10320000 	.word	0x10320000
 8002314:	10310000 	.word	0x10310000
 8002318:	10220000 	.word	0x10220000
 800231c:	10210000 	.word	0x10210000
 8002320:	10120000 	.word	0x10120000
 8002324:	10110000 	.word	0x10110000
 8002328:	40021000 	.word	0x40021000
 800232c:	40010000 	.word	0x40010000
 8002330:	40010800 	.word	0x40010800
 8002334:	40010c00 	.word	0x40010c00
 8002338:	40011000 	.word	0x40011000
 800233c:	40010400 	.word	0x40010400

08002340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	887b      	ldrh	r3, [r7, #2]
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e001      	b.n	8002362 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	807b      	strh	r3, [r7, #2]
 800237a:	4613      	mov	r3, r2
 800237c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237e:	787b      	ldrb	r3, [r7, #1]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002384:	887a      	ldrh	r2, [r7, #2]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800238a:	e003      	b.n	8002394 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	041a      	lsls	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	611a      	str	r2, [r3, #16]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e26c      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8087 	beq.w	80024ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c0:	4b92      	ldr	r3, [pc, #584]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d00c      	beq.n	80023e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023cc:	4b8f      	ldr	r3, [pc, #572]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d112      	bne.n	80023fe <HAL_RCC_OscConfig+0x5e>
 80023d8:	4b8c      	ldr	r3, [pc, #560]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e4:	d10b      	bne.n	80023fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e6:	4b89      	ldr	r3, [pc, #548]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d06c      	beq.n	80024cc <HAL_RCC_OscConfig+0x12c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d168      	bne.n	80024cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e246      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x76>
 8002408:	4b80      	ldr	r3, [pc, #512]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a7f      	ldr	r2, [pc, #508]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e02e      	b.n	8002474 <HAL_RCC_OscConfig+0xd4>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x98>
 800241e:	4b7b      	ldr	r3, [pc, #492]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7a      	ldr	r2, [pc, #488]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b78      	ldr	r3, [pc, #480]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a77      	ldr	r2, [pc, #476]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xd4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0xbc>
 8002442:	4b72      	ldr	r3, [pc, #456]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a71      	ldr	r2, [pc, #452]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b6f      	ldr	r3, [pc, #444]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6e      	ldr	r2, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xd4>
 800245c:	4b6b      	ldr	r3, [pc, #428]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6a      	ldr	r2, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b68      	ldr	r3, [pc, #416]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a67      	ldr	r2, [pc, #412]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff fcce 	bl	8001e1c <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff fcca 	bl	8001e1c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1fa      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xe4>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fcba 	bl	8001e1c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fcb6 	bl	8001e1c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1e6      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x10c>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d063      	beq.n	80025a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024da:	4b4c      	ldr	r3, [pc, #304]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024e6:	4b49      	ldr	r3, [pc, #292]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d11c      	bne.n	800252c <HAL_RCC_OscConfig+0x18c>
 80024f2:	4b46      	ldr	r3, [pc, #280]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	4b43      	ldr	r3, [pc, #268]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_RCC_OscConfig+0x176>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e1ba      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002516:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4939      	ldr	r1, [pc, #228]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	e03a      	b.n	80025a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002534:	4b36      	ldr	r3, [pc, #216]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7ff fc6f 	bl	8001e1c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002542:	f7ff fc6b 	bl	8001e1c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e19b      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4927      	ldr	r1, [pc, #156]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
 8002574:	e015      	b.n	80025a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff fc4e 	bl	8001e1c <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002584:	f7ff fc4a 	bl	8001e1c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e17a      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d03a      	beq.n	8002624 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d019      	beq.n	80025ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <HAL_RCC_OscConfig+0x274>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025bc:	f7ff fc2e 	bl	8001e1c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c4:	f7ff fc2a 	bl	8001e1c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e15a      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_RCC_OscConfig+0x26c>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f000 fa9a 	bl	8002b1c <RCC_Delay>
 80025e8:	e01c      	b.n	8002624 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_RCC_OscConfig+0x274>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7ff fc14 	bl	8001e1c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f6:	e00f      	b.n	8002618 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff fc10 	bl	8001e1c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d908      	bls.n	8002618 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e140      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	42420000 	.word	0x42420000
 8002614:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	4b9e      	ldr	r3, [pc, #632]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e9      	bne.n	80025f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a6 	beq.w	800277e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002636:	4b97      	ldr	r3, [pc, #604]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	4b94      	ldr	r3, [pc, #592]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a93      	ldr	r2, [pc, #588]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	61d3      	str	r3, [r2, #28]
 800264e:	4b91      	ldr	r3, [pc, #580]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266a:	4b8b      	ldr	r3, [pc, #556]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a8a      	ldr	r2, [pc, #552]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7ff fbd1 	bl	8001e1c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267e:	f7ff fbcd 	bl	8001e1c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	; 0x64
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0fd      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	4b81      	ldr	r3, [pc, #516]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x312>
 80026a4:	4b7b      	ldr	r3, [pc, #492]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a7a      	ldr	r2, [pc, #488]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	e02d      	b.n	800270e <HAL_RCC_OscConfig+0x36e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x334>
 80026ba:	4b76      	ldr	r3, [pc, #472]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4a75      	ldr	r2, [pc, #468]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6213      	str	r3, [r2, #32]
 80026c6:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4a72      	ldr	r2, [pc, #456]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	6213      	str	r3, [r2, #32]
 80026d2:	e01c      	b.n	800270e <HAL_RCC_OscConfig+0x36e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d10c      	bne.n	80026f6 <HAL_RCC_OscConfig+0x356>
 80026dc:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4a6c      	ldr	r2, [pc, #432]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6213      	str	r3, [r2, #32]
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a69      	ldr	r2, [pc, #420]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	e00b      	b.n	800270e <HAL_RCC_OscConfig+0x36e>
 80026f6:	4b67      	ldr	r3, [pc, #412]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a66      	ldr	r2, [pc, #408]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	4b64      	ldr	r3, [pc, #400]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a63      	ldr	r2, [pc, #396]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d015      	beq.n	8002742 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002716:	f7ff fb81 	bl	8001e1c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7ff fb7d 	bl	8001e1c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	; 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0ab      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	4b57      	ldr	r3, [pc, #348]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ee      	beq.n	800271e <HAL_RCC_OscConfig+0x37e>
 8002740:	e014      	b.n	800276c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7ff fb6b 	bl	8001e1c <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7ff fb67 	bl	8001e1c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e095      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ee      	bne.n	800274a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800276c:	7dfb      	ldrb	r3, [r7, #23]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002772:	4b48      	ldr	r3, [pc, #288]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4a47      	ldr	r2, [pc, #284]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8081 	beq.w	800288a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002788:	4b42      	ldr	r3, [pc, #264]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b08      	cmp	r3, #8
 8002792:	d061      	beq.n	8002858 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d146      	bne.n	800282a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279c:	4b3f      	ldr	r3, [pc, #252]	; (800289c <HAL_RCC_OscConfig+0x4fc>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7ff fb3b 	bl	8001e1c <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7ff fb37 	bl	8001e1c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e067      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f0      	bne.n	80027aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d0:	d108      	bne.n	80027e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027d2:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	492d      	ldr	r1, [pc, #180]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a19      	ldr	r1, [r3, #32]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	430b      	orrs	r3, r1
 80027f6:	4927      	ldr	r1, [pc, #156]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_OscConfig+0x4fc>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff fb0b 	bl	8001e1c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7ff fb07 	bl	8001e1c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e037      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x46a>
 8002828:	e02f      	b.n	800288a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <HAL_RCC_OscConfig+0x4fc>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7ff faf4 	bl	8001e1c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002838:	f7ff faf0 	bl	8001e1c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e020      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x498>
 8002856:	e018      	b.n	800288a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e013      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_OscConfig+0x4f4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	429a      	cmp	r2, r3
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	40007000 	.word	0x40007000
 800289c:	42420060 	.word	0x42420060

080028a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0d0      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d910      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4965      	ldr	r1, [pc, #404]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0b8      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028fc:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002906:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002914:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800291e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b50      	ldr	r3, [pc, #320]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	494d      	ldr	r1, [pc, #308]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d040      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d115      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e07f      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e073      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296e:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e06b      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4936      	ldr	r1, [pc, #216]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7ff fa44 	bl	8001e1c <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7ff fa40 	bl	8001e1c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e053      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d210      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4922      	ldr	r1, [pc, #136]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e032      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4916      	ldr	r1, [pc, #88]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	490e      	ldr	r1, [pc, #56]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a2e:	f000 f821 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	490a      	ldr	r1, [pc, #40]	; (8002a68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	5ccb      	ldrb	r3, [r1, r3]
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <HAL_RCC_ClockConfig+0x1cc>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_RCC_ClockConfig+0x1d0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f9a2 	bl	8001d98 <HAL_InitTick>

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40022000 	.word	0x40022000
 8002a64:	40021000 	.word	0x40021000
 8002a68:	080042b0 	.word	0x080042b0
 8002a6c:	2000004c 	.word	0x2000004c
 8002a70:	20000050 	.word	0x20000050

08002a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x30>
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x36>
 8002aa2:	e027      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa6:	613b      	str	r3, [r7, #16]
      break;
 8002aa8:	e027      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	0c9b      	lsrs	r3, r3, #18
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0c5b      	lsrs	r3, r3, #17
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	4a11      	ldr	r2, [pc, #68]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ad6:	fb02 f203 	mul.w	r2, r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e004      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	613b      	str	r3, [r7, #16]
      break;
 8002af2:	e002      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002af6:	613b      	str	r3, [r7, #16]
      break;
 8002af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afa:	693b      	ldr	r3, [r7, #16]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	007a1200 	.word	0x007a1200
 8002b10:	080042c0 	.word	0x080042c0
 8002b14:	080042d0 	.word	0x080042d0
 8002b18:	003d0900 	.word	0x003d0900

08002b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <RCC_Delay+0x34>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <RCC_Delay+0x38>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0a5b      	lsrs	r3, r3, #9
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b38:	bf00      	nop
  }
  while (Delay --);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e5a      	subs	r2, r3, #1
 8002b3e:	60fa      	str	r2, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f9      	bne.n	8002b38 <RCC_Delay+0x1c>
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	2000004c 	.word	0x2000004c
 8002b54:	10624dd3 	.word	0x10624dd3

08002b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e041      	b.n	8002bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff f872 	bl	8001c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 fa56 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d001      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e035      	b.n	8002c7c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <HAL_TIM_Base_Start_IT+0x90>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_TIM_Base_Start_IT+0x4e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3a:	d004      	beq.n	8002c46 <HAL_TIM_Base_Start_IT+0x4e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_TIM_Base_Start_IT+0x94>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d111      	bne.n	8002c6a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d010      	beq.n	8002c7a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c68:	e007      	b.n	8002c7a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400

08002c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d020      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01b      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0202 	mvn.w	r2, #2
 8002cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f998 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f98b 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f99a 	bl	8003022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d020      	beq.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01b      	beq.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0204 	mvn.w	r2, #4
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f972 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f965 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f974 	bl	8003022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d020      	beq.n	8002d8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0208 	mvn.w	r2, #8
 8002d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2204      	movs	r2, #4
 8002d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f94c 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f93f 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f94e 	bl	8003022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d020      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01b      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0210 	mvn.w	r2, #16
 8002da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2208      	movs	r2, #8
 8002dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f926 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002dc4:	e005      	b.n	8002dd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f919 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f928 	bl	8003022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0201 	mvn.w	r2, #1
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe f804 	bl	8000e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fa6f 	bl	80032fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f8f8 	bl	8003034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0220 	mvn.w	r2, #32
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa42 	bl	80032ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_TIM_ConfigClockSource+0x1c>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e0b4      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x186>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec4:	d03e      	beq.n	8002f44 <HAL_TIM_ConfigClockSource+0xd4>
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eca:	f200 8087 	bhi.w	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed2:	f000 8086 	beq.w	8002fe2 <HAL_TIM_ConfigClockSource+0x172>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	d87f      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b70      	cmp	r3, #112	; 0x70
 8002ede:	d01a      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0xa6>
 8002ee0:	2b70      	cmp	r3, #112	; 0x70
 8002ee2:	d87b      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b60      	cmp	r3, #96	; 0x60
 8002ee6:	d050      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x11a>
 8002ee8:	2b60      	cmp	r3, #96	; 0x60
 8002eea:	d877      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b50      	cmp	r3, #80	; 0x50
 8002eee:	d03c      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0xfa>
 8002ef0:	2b50      	cmp	r3, #80	; 0x50
 8002ef2:	d873      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d058      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x13a>
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d86f      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b30      	cmp	r3, #48	; 0x30
 8002efe:	d064      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f00:	2b30      	cmp	r3, #48	; 0x30
 8002f02:	d86b      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d060      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d867      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05c      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d05a      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f14:	e062      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6899      	ldr	r1, [r3, #8]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f000 f96a 	bl	80031fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	609a      	str	r2, [r3, #8]
      break;
 8002f42:	e04f      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6899      	ldr	r1, [r3, #8]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f000 f953 	bl	80031fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f66:	609a      	str	r2, [r3, #8]
      break;
 8002f68:	e03c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f8ca 	bl	8003110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2150      	movs	r1, #80	; 0x50
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f921 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002f88:	e02c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f000 f8e8 	bl	800316c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2160      	movs	r1, #96	; 0x60
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f911 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002fa8:	e01c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f000 f8aa 	bl	8003110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2140      	movs	r1, #64	; 0x40
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f901 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002fc8:	e00c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f000 f8f8 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002fda:	e003      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e000      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
	...

08003048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <TIM_Base_SetConfig+0xc0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d007      	beq.n	8003070 <TIM_Base_SetConfig+0x28>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d003      	beq.n	8003070 <TIM_Base_SetConfig+0x28>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a28      	ldr	r2, [pc, #160]	; (800310c <TIM_Base_SetConfig+0xc4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d108      	bne.n	8003082 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a20      	ldr	r2, [pc, #128]	; (8003108 <TIM_Base_SetConfig+0xc0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <TIM_Base_SetConfig+0x52>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003090:	d003      	beq.n	800309a <TIM_Base_SetConfig+0x52>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <TIM_Base_SetConfig+0xc4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d108      	bne.n	80030ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <TIM_Base_SetConfig+0xc0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f023 0201 	bic.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	611a      	str	r2, [r3, #16]
  }
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40000400 	.word	0x40000400

08003110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0201 	bic.w	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800313a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 030a 	bic.w	r3, r3, #10
 800314c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0210 	bic.w	r2, r3, #16
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	031b      	lsls	r3, r3, #12
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	621a      	str	r2, [r3, #32]
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f043 0307 	orr.w	r3, r3, #7
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031fe:	b480      	push	{r7}
 8003200:	b087      	sub	sp, #28
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	021a      	lsls	r2, r3, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	431a      	orrs	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4313      	orrs	r3, r2
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	609a      	str	r2, [r3, #8]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003250:	2302      	movs	r3, #2
 8003252:	e041      	b.n	80032d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d009      	beq.n	80032ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d004      	beq.n	80032ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d10c      	bne.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40012c00 	.word	0x40012c00
 80032e8:	40000400 	.word	0x40000400

080032ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <__errno>:
 8003310:	4b01      	ldr	r3, [pc, #4]	; (8003318 <__errno+0x8>)
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000058 	.word	0x20000058

0800331c <__libc_init_array>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	2600      	movs	r6, #0
 8003320:	4d0c      	ldr	r5, [pc, #48]	; (8003354 <__libc_init_array+0x38>)
 8003322:	4c0d      	ldr	r4, [pc, #52]	; (8003358 <__libc_init_array+0x3c>)
 8003324:	1b64      	subs	r4, r4, r5
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	42a6      	cmp	r6, r4
 800332a:	d109      	bne.n	8003340 <__libc_init_array+0x24>
 800332c:	f000 ffb2 	bl	8004294 <_init>
 8003330:	2600      	movs	r6, #0
 8003332:	4d0a      	ldr	r5, [pc, #40]	; (800335c <__libc_init_array+0x40>)
 8003334:	4c0a      	ldr	r4, [pc, #40]	; (8003360 <__libc_init_array+0x44>)
 8003336:	1b64      	subs	r4, r4, r5
 8003338:	10a4      	asrs	r4, r4, #2
 800333a:	42a6      	cmp	r6, r4
 800333c:	d105      	bne.n	800334a <__libc_init_array+0x2e>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	f855 3b04 	ldr.w	r3, [r5], #4
 8003344:	4798      	blx	r3
 8003346:	3601      	adds	r6, #1
 8003348:	e7ee      	b.n	8003328 <__libc_init_array+0xc>
 800334a:	f855 3b04 	ldr.w	r3, [r5], #4
 800334e:	4798      	blx	r3
 8003350:	3601      	adds	r6, #1
 8003352:	e7f2      	b.n	800333a <__libc_init_array+0x1e>
 8003354:	08004318 	.word	0x08004318
 8003358:	08004318 	.word	0x08004318
 800335c:	08004318 	.word	0x08004318
 8003360:	0800431c 	.word	0x0800431c

08003364 <memset>:
 8003364:	4603      	mov	r3, r0
 8003366:	4402      	add	r2, r0
 8003368:	4293      	cmp	r3, r2
 800336a:	d100      	bne.n	800336e <memset+0xa>
 800336c:	4770      	bx	lr
 800336e:	f803 1b01 	strb.w	r1, [r3], #1
 8003372:	e7f9      	b.n	8003368 <memset+0x4>

08003374 <pow>:
 8003374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003378:	461f      	mov	r7, r3
 800337a:	4680      	mov	r8, r0
 800337c:	4689      	mov	r9, r1
 800337e:	4616      	mov	r6, r2
 8003380:	f000 f8a6 	bl	80034d0 <__ieee754_pow>
 8003384:	4b4d      	ldr	r3, [pc, #308]	; (80034bc <pow+0x148>)
 8003386:	4604      	mov	r4, r0
 8003388:	f993 3000 	ldrsb.w	r3, [r3]
 800338c:	460d      	mov	r5, r1
 800338e:	3301      	adds	r3, #1
 8003390:	d015      	beq.n	80033be <pow+0x4a>
 8003392:	4632      	mov	r2, r6
 8003394:	463b      	mov	r3, r7
 8003396:	4630      	mov	r0, r6
 8003398:	4639      	mov	r1, r7
 800339a:	f7fd fb2f 	bl	80009fc <__aeabi_dcmpun>
 800339e:	b970      	cbnz	r0, 80033be <pow+0x4a>
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	4640      	mov	r0, r8
 80033a6:	4649      	mov	r1, r9
 80033a8:	f7fd fb28 	bl	80009fc <__aeabi_dcmpun>
 80033ac:	2200      	movs	r2, #0
 80033ae:	2300      	movs	r3, #0
 80033b0:	b148      	cbz	r0, 80033c6 <pow+0x52>
 80033b2:	4630      	mov	r0, r6
 80033b4:	4639      	mov	r1, r7
 80033b6:	f7fd faef 	bl	8000998 <__aeabi_dcmpeq>
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d17b      	bne.n	80034b6 <pow+0x142>
 80033be:	4620      	mov	r0, r4
 80033c0:	4629      	mov	r1, r5
 80033c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033c6:	4640      	mov	r0, r8
 80033c8:	4649      	mov	r1, r9
 80033ca:	f7fd fae5 	bl	8000998 <__aeabi_dcmpeq>
 80033ce:	b1e0      	cbz	r0, 800340a <pow+0x96>
 80033d0:	2200      	movs	r2, #0
 80033d2:	2300      	movs	r3, #0
 80033d4:	4630      	mov	r0, r6
 80033d6:	4639      	mov	r1, r7
 80033d8:	f7fd fade 	bl	8000998 <__aeabi_dcmpeq>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d16a      	bne.n	80034b6 <pow+0x142>
 80033e0:	4630      	mov	r0, r6
 80033e2:	4639      	mov	r1, r7
 80033e4:	f000 fe39 	bl	800405a <finite>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d0e8      	beq.n	80033be <pow+0x4a>
 80033ec:	2200      	movs	r2, #0
 80033ee:	2300      	movs	r3, #0
 80033f0:	4630      	mov	r0, r6
 80033f2:	4639      	mov	r1, r7
 80033f4:	f7fd fada 	bl	80009ac <__aeabi_dcmplt>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d0e0      	beq.n	80033be <pow+0x4a>
 80033fc:	f7ff ff88 	bl	8003310 <__errno>
 8003400:	2321      	movs	r3, #33	; 0x21
 8003402:	2400      	movs	r4, #0
 8003404:	6003      	str	r3, [r0, #0]
 8003406:	4d2e      	ldr	r5, [pc, #184]	; (80034c0 <pow+0x14c>)
 8003408:	e7d9      	b.n	80033be <pow+0x4a>
 800340a:	4620      	mov	r0, r4
 800340c:	4629      	mov	r1, r5
 800340e:	f000 fe24 	bl	800405a <finite>
 8003412:	bba8      	cbnz	r0, 8003480 <pow+0x10c>
 8003414:	4640      	mov	r0, r8
 8003416:	4649      	mov	r1, r9
 8003418:	f000 fe1f 	bl	800405a <finite>
 800341c:	b380      	cbz	r0, 8003480 <pow+0x10c>
 800341e:	4630      	mov	r0, r6
 8003420:	4639      	mov	r1, r7
 8003422:	f000 fe1a 	bl	800405a <finite>
 8003426:	b358      	cbz	r0, 8003480 <pow+0x10c>
 8003428:	4622      	mov	r2, r4
 800342a:	462b      	mov	r3, r5
 800342c:	4620      	mov	r0, r4
 800342e:	4629      	mov	r1, r5
 8003430:	f7fd fae4 	bl	80009fc <__aeabi_dcmpun>
 8003434:	b160      	cbz	r0, 8003450 <pow+0xdc>
 8003436:	f7ff ff6b 	bl	8003310 <__errno>
 800343a:	2321      	movs	r3, #33	; 0x21
 800343c:	2200      	movs	r2, #0
 800343e:	6003      	str	r3, [r0, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	f7fd f969 	bl	800071c <__aeabi_ddiv>
 800344a:	4604      	mov	r4, r0
 800344c:	460d      	mov	r5, r1
 800344e:	e7b6      	b.n	80033be <pow+0x4a>
 8003450:	f7ff ff5e 	bl	8003310 <__errno>
 8003454:	2322      	movs	r3, #34	; 0x22
 8003456:	2200      	movs	r2, #0
 8003458:	6003      	str	r3, [r0, #0]
 800345a:	4649      	mov	r1, r9
 800345c:	2300      	movs	r3, #0
 800345e:	4640      	mov	r0, r8
 8003460:	f7fd faa4 	bl	80009ac <__aeabi_dcmplt>
 8003464:	2400      	movs	r4, #0
 8003466:	b148      	cbz	r0, 800347c <pow+0x108>
 8003468:	4630      	mov	r0, r6
 800346a:	4639      	mov	r1, r7
 800346c:	f000 fe02 	bl	8004074 <rint>
 8003470:	4632      	mov	r2, r6
 8003472:	463b      	mov	r3, r7
 8003474:	f7fd fa90 	bl	8000998 <__aeabi_dcmpeq>
 8003478:	2800      	cmp	r0, #0
 800347a:	d0c4      	beq.n	8003406 <pow+0x92>
 800347c:	4d11      	ldr	r5, [pc, #68]	; (80034c4 <pow+0x150>)
 800347e:	e79e      	b.n	80033be <pow+0x4a>
 8003480:	2200      	movs	r2, #0
 8003482:	2300      	movs	r3, #0
 8003484:	4620      	mov	r0, r4
 8003486:	4629      	mov	r1, r5
 8003488:	f7fd fa86 	bl	8000998 <__aeabi_dcmpeq>
 800348c:	2800      	cmp	r0, #0
 800348e:	d096      	beq.n	80033be <pow+0x4a>
 8003490:	4640      	mov	r0, r8
 8003492:	4649      	mov	r1, r9
 8003494:	f000 fde1 	bl	800405a <finite>
 8003498:	2800      	cmp	r0, #0
 800349a:	d090      	beq.n	80033be <pow+0x4a>
 800349c:	4630      	mov	r0, r6
 800349e:	4639      	mov	r1, r7
 80034a0:	f000 fddb 	bl	800405a <finite>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d08a      	beq.n	80033be <pow+0x4a>
 80034a8:	f7ff ff32 	bl	8003310 <__errno>
 80034ac:	2322      	movs	r3, #34	; 0x22
 80034ae:	2400      	movs	r4, #0
 80034b0:	2500      	movs	r5, #0
 80034b2:	6003      	str	r3, [r0, #0]
 80034b4:	e783      	b.n	80033be <pow+0x4a>
 80034b6:	2400      	movs	r4, #0
 80034b8:	4d03      	ldr	r5, [pc, #12]	; (80034c8 <pow+0x154>)
 80034ba:	e780      	b.n	80033be <pow+0x4a>
 80034bc:	200000bc 	.word	0x200000bc
 80034c0:	fff00000 	.word	0xfff00000
 80034c4:	7ff00000 	.word	0x7ff00000
 80034c8:	3ff00000 	.word	0x3ff00000
 80034cc:	00000000 	.word	0x00000000

080034d0 <__ieee754_pow>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	b093      	sub	sp, #76	; 0x4c
 80034d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034da:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80034de:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80034e2:	ea55 0302 	orrs.w	r3, r5, r2
 80034e6:	4607      	mov	r7, r0
 80034e8:	4688      	mov	r8, r1
 80034ea:	f000 84bf 	beq.w	8003e6c <__ieee754_pow+0x99c>
 80034ee:	4b7e      	ldr	r3, [pc, #504]	; (80036e8 <__ieee754_pow+0x218>)
 80034f0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80034f4:	429c      	cmp	r4, r3
 80034f6:	4689      	mov	r9, r1
 80034f8:	4682      	mov	sl, r0
 80034fa:	dc09      	bgt.n	8003510 <__ieee754_pow+0x40>
 80034fc:	d103      	bne.n	8003506 <__ieee754_pow+0x36>
 80034fe:	b978      	cbnz	r0, 8003520 <__ieee754_pow+0x50>
 8003500:	42a5      	cmp	r5, r4
 8003502:	dd02      	ble.n	800350a <__ieee754_pow+0x3a>
 8003504:	e00c      	b.n	8003520 <__ieee754_pow+0x50>
 8003506:	429d      	cmp	r5, r3
 8003508:	dc02      	bgt.n	8003510 <__ieee754_pow+0x40>
 800350a:	429d      	cmp	r5, r3
 800350c:	d10e      	bne.n	800352c <__ieee754_pow+0x5c>
 800350e:	b16a      	cbz	r2, 800352c <__ieee754_pow+0x5c>
 8003510:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003514:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003518:	ea54 030a 	orrs.w	r3, r4, sl
 800351c:	f000 84a6 	beq.w	8003e6c <__ieee754_pow+0x99c>
 8003520:	4872      	ldr	r0, [pc, #456]	; (80036ec <__ieee754_pow+0x21c>)
 8003522:	b013      	add	sp, #76	; 0x4c
 8003524:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003528:	f000 bd9e 	b.w	8004068 <nan>
 800352c:	f1b9 0f00 	cmp.w	r9, #0
 8003530:	da39      	bge.n	80035a6 <__ieee754_pow+0xd6>
 8003532:	4b6f      	ldr	r3, [pc, #444]	; (80036f0 <__ieee754_pow+0x220>)
 8003534:	429d      	cmp	r5, r3
 8003536:	dc54      	bgt.n	80035e2 <__ieee754_pow+0x112>
 8003538:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800353c:	429d      	cmp	r5, r3
 800353e:	f340 84a6 	ble.w	8003e8e <__ieee754_pow+0x9be>
 8003542:	152b      	asrs	r3, r5, #20
 8003544:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003548:	2b14      	cmp	r3, #20
 800354a:	dd0f      	ble.n	800356c <__ieee754_pow+0x9c>
 800354c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003550:	fa22 f103 	lsr.w	r1, r2, r3
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	4293      	cmp	r3, r2
 800355a:	f040 8498 	bne.w	8003e8e <__ieee754_pow+0x9be>
 800355e:	f001 0101 	and.w	r1, r1, #1
 8003562:	f1c1 0302 	rsb	r3, r1, #2
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	b182      	cbz	r2, 800358c <__ieee754_pow+0xbc>
 800356a:	e05e      	b.n	800362a <__ieee754_pow+0x15a>
 800356c:	2a00      	cmp	r2, #0
 800356e:	d15a      	bne.n	8003626 <__ieee754_pow+0x156>
 8003570:	f1c3 0314 	rsb	r3, r3, #20
 8003574:	fa45 f103 	asr.w	r1, r5, r3
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	42ab      	cmp	r3, r5
 800357e:	f040 8483 	bne.w	8003e88 <__ieee754_pow+0x9b8>
 8003582:	f001 0101 	and.w	r1, r1, #1
 8003586:	f1c1 0302 	rsb	r3, r1, #2
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <__ieee754_pow+0x224>)
 800358e:	429d      	cmp	r5, r3
 8003590:	d130      	bne.n	80035f4 <__ieee754_pow+0x124>
 8003592:	2e00      	cmp	r6, #0
 8003594:	f280 8474 	bge.w	8003e80 <__ieee754_pow+0x9b0>
 8003598:	463a      	mov	r2, r7
 800359a:	4643      	mov	r3, r8
 800359c:	2000      	movs	r0, #0
 800359e:	4955      	ldr	r1, [pc, #340]	; (80036f4 <__ieee754_pow+0x224>)
 80035a0:	f7fd f8bc 	bl	800071c <__aeabi_ddiv>
 80035a4:	e02f      	b.n	8003606 <__ieee754_pow+0x136>
 80035a6:	2300      	movs	r3, #0
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2a00      	cmp	r2, #0
 80035ac:	d13d      	bne.n	800362a <__ieee754_pow+0x15a>
 80035ae:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <__ieee754_pow+0x218>)
 80035b0:	429d      	cmp	r5, r3
 80035b2:	d1eb      	bne.n	800358c <__ieee754_pow+0xbc>
 80035b4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80035b8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80035bc:	ea53 030a 	orrs.w	r3, r3, sl
 80035c0:	f000 8454 	beq.w	8003e6c <__ieee754_pow+0x99c>
 80035c4:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <__ieee754_pow+0x228>)
 80035c6:	429c      	cmp	r4, r3
 80035c8:	dd0d      	ble.n	80035e6 <__ieee754_pow+0x116>
 80035ca:	2e00      	cmp	r6, #0
 80035cc:	f280 8454 	bge.w	8003e78 <__ieee754_pow+0x9a8>
 80035d0:	f04f 0b00 	mov.w	fp, #0
 80035d4:	f04f 0c00 	mov.w	ip, #0
 80035d8:	4658      	mov	r0, fp
 80035da:	4661      	mov	r1, ip
 80035dc:	b013      	add	sp, #76	; 0x4c
 80035de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e2:	2302      	movs	r3, #2
 80035e4:	e7e0      	b.n	80035a8 <__ieee754_pow+0xd8>
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	daf2      	bge.n	80035d0 <__ieee754_pow+0x100>
 80035ea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80035ee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80035f2:	e7f1      	b.n	80035d8 <__ieee754_pow+0x108>
 80035f4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80035f8:	d108      	bne.n	800360c <__ieee754_pow+0x13c>
 80035fa:	463a      	mov	r2, r7
 80035fc:	4643      	mov	r3, r8
 80035fe:	4638      	mov	r0, r7
 8003600:	4641      	mov	r1, r8
 8003602:	f7fc ff61 	bl	80004c8 <__aeabi_dmul>
 8003606:	4683      	mov	fp, r0
 8003608:	468c      	mov	ip, r1
 800360a:	e7e5      	b.n	80035d8 <__ieee754_pow+0x108>
 800360c:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <__ieee754_pow+0x22c>)
 800360e:	429e      	cmp	r6, r3
 8003610:	d10b      	bne.n	800362a <__ieee754_pow+0x15a>
 8003612:	f1b9 0f00 	cmp.w	r9, #0
 8003616:	db08      	blt.n	800362a <__ieee754_pow+0x15a>
 8003618:	4638      	mov	r0, r7
 800361a:	4641      	mov	r1, r8
 800361c:	b013      	add	sp, #76	; 0x4c
 800361e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003622:	f000 bc6b 	b.w	8003efc <__ieee754_sqrt>
 8003626:	2300      	movs	r3, #0
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	4638      	mov	r0, r7
 800362c:	4641      	mov	r1, r8
 800362e:	f000 fd11 	bl	8004054 <fabs>
 8003632:	4683      	mov	fp, r0
 8003634:	468c      	mov	ip, r1
 8003636:	f1ba 0f00 	cmp.w	sl, #0
 800363a:	d129      	bne.n	8003690 <__ieee754_pow+0x1c0>
 800363c:	b124      	cbz	r4, 8003648 <__ieee754_pow+0x178>
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <__ieee754_pow+0x224>)
 8003640:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003644:	429a      	cmp	r2, r3
 8003646:	d123      	bne.n	8003690 <__ieee754_pow+0x1c0>
 8003648:	2e00      	cmp	r6, #0
 800364a:	da07      	bge.n	800365c <__ieee754_pow+0x18c>
 800364c:	465a      	mov	r2, fp
 800364e:	4663      	mov	r3, ip
 8003650:	2000      	movs	r0, #0
 8003652:	4928      	ldr	r1, [pc, #160]	; (80036f4 <__ieee754_pow+0x224>)
 8003654:	f7fd f862 	bl	800071c <__aeabi_ddiv>
 8003658:	4683      	mov	fp, r0
 800365a:	468c      	mov	ip, r1
 800365c:	f1b9 0f00 	cmp.w	r9, #0
 8003660:	daba      	bge.n	80035d8 <__ieee754_pow+0x108>
 8003662:	9b00      	ldr	r3, [sp, #0]
 8003664:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003668:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800366c:	4323      	orrs	r3, r4
 800366e:	d108      	bne.n	8003682 <__ieee754_pow+0x1b2>
 8003670:	465a      	mov	r2, fp
 8003672:	4663      	mov	r3, ip
 8003674:	4658      	mov	r0, fp
 8003676:	4661      	mov	r1, ip
 8003678:	f7fc fd6e 	bl	8000158 <__aeabi_dsub>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	e78e      	b.n	80035a0 <__ieee754_pow+0xd0>
 8003682:	9b00      	ldr	r3, [sp, #0]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d1a7      	bne.n	80035d8 <__ieee754_pow+0x108>
 8003688:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800368c:	469c      	mov	ip, r3
 800368e:	e7a3      	b.n	80035d8 <__ieee754_pow+0x108>
 8003690:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8003694:	3b01      	subs	r3, #1
 8003696:	930c      	str	r3, [sp, #48]	; 0x30
 8003698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800369a:	9b00      	ldr	r3, [sp, #0]
 800369c:	4313      	orrs	r3, r2
 800369e:	d104      	bne.n	80036aa <__ieee754_pow+0x1da>
 80036a0:	463a      	mov	r2, r7
 80036a2:	4643      	mov	r3, r8
 80036a4:	4638      	mov	r0, r7
 80036a6:	4641      	mov	r1, r8
 80036a8:	e7e6      	b.n	8003678 <__ieee754_pow+0x1a8>
 80036aa:	4b15      	ldr	r3, [pc, #84]	; (8003700 <__ieee754_pow+0x230>)
 80036ac:	429d      	cmp	r5, r3
 80036ae:	f340 80f9 	ble.w	80038a4 <__ieee754_pow+0x3d4>
 80036b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80036b6:	429d      	cmp	r5, r3
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <__ieee754_pow+0x228>)
 80036ba:	dd09      	ble.n	80036d0 <__ieee754_pow+0x200>
 80036bc:	429c      	cmp	r4, r3
 80036be:	dc0c      	bgt.n	80036da <__ieee754_pow+0x20a>
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	da85      	bge.n	80035d0 <__ieee754_pow+0x100>
 80036c4:	a306      	add	r3, pc, #24	; (adr r3, 80036e0 <__ieee754_pow+0x210>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	4610      	mov	r0, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	e798      	b.n	8003602 <__ieee754_pow+0x132>
 80036d0:	429c      	cmp	r4, r3
 80036d2:	dbf5      	blt.n	80036c0 <__ieee754_pow+0x1f0>
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <__ieee754_pow+0x224>)
 80036d6:	429c      	cmp	r4, r3
 80036d8:	dd14      	ble.n	8003704 <__ieee754_pow+0x234>
 80036da:	2e00      	cmp	r6, #0
 80036dc:	dcf2      	bgt.n	80036c4 <__ieee754_pow+0x1f4>
 80036de:	e777      	b.n	80035d0 <__ieee754_pow+0x100>
 80036e0:	8800759c 	.word	0x8800759c
 80036e4:	7e37e43c 	.word	0x7e37e43c
 80036e8:	7ff00000 	.word	0x7ff00000
 80036ec:	080042d2 	.word	0x080042d2
 80036f0:	433fffff 	.word	0x433fffff
 80036f4:	3ff00000 	.word	0x3ff00000
 80036f8:	3fefffff 	.word	0x3fefffff
 80036fc:	3fe00000 	.word	0x3fe00000
 8003700:	41e00000 	.word	0x41e00000
 8003704:	4661      	mov	r1, ip
 8003706:	2200      	movs	r2, #0
 8003708:	4658      	mov	r0, fp
 800370a:	4b61      	ldr	r3, [pc, #388]	; (8003890 <__ieee754_pow+0x3c0>)
 800370c:	f7fc fd24 	bl	8000158 <__aeabi_dsub>
 8003710:	a355      	add	r3, pc, #340	; (adr r3, 8003868 <__ieee754_pow+0x398>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	4604      	mov	r4, r0
 8003718:	460d      	mov	r5, r1
 800371a:	f7fc fed5 	bl	80004c8 <__aeabi_dmul>
 800371e:	a354      	add	r3, pc, #336	; (adr r3, 8003870 <__ieee754_pow+0x3a0>)
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	4606      	mov	r6, r0
 8003726:	460f      	mov	r7, r1
 8003728:	4620      	mov	r0, r4
 800372a:	4629      	mov	r1, r5
 800372c:	f7fc fecc 	bl	80004c8 <__aeabi_dmul>
 8003730:	2200      	movs	r2, #0
 8003732:	4682      	mov	sl, r0
 8003734:	468b      	mov	fp, r1
 8003736:	4620      	mov	r0, r4
 8003738:	4629      	mov	r1, r5
 800373a:	4b56      	ldr	r3, [pc, #344]	; (8003894 <__ieee754_pow+0x3c4>)
 800373c:	f7fc fec4 	bl	80004c8 <__aeabi_dmul>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	a14c      	add	r1, pc, #304	; (adr r1, 8003878 <__ieee754_pow+0x3a8>)
 8003746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800374a:	f7fc fd05 	bl	8000158 <__aeabi_dsub>
 800374e:	4622      	mov	r2, r4
 8003750:	462b      	mov	r3, r5
 8003752:	f7fc feb9 	bl	80004c8 <__aeabi_dmul>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	2000      	movs	r0, #0
 800375c:	494e      	ldr	r1, [pc, #312]	; (8003898 <__ieee754_pow+0x3c8>)
 800375e:	f7fc fcfb 	bl	8000158 <__aeabi_dsub>
 8003762:	4622      	mov	r2, r4
 8003764:	462b      	mov	r3, r5
 8003766:	4680      	mov	r8, r0
 8003768:	4689      	mov	r9, r1
 800376a:	4620      	mov	r0, r4
 800376c:	4629      	mov	r1, r5
 800376e:	f7fc feab 	bl	80004c8 <__aeabi_dmul>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4640      	mov	r0, r8
 8003778:	4649      	mov	r1, r9
 800377a:	f7fc fea5 	bl	80004c8 <__aeabi_dmul>
 800377e:	a340      	add	r3, pc, #256	; (adr r3, 8003880 <__ieee754_pow+0x3b0>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f7fc fea0 	bl	80004c8 <__aeabi_dmul>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4650      	mov	r0, sl
 800378e:	4659      	mov	r1, fp
 8003790:	f7fc fce2 	bl	8000158 <__aeabi_dsub>
 8003794:	f04f 0a00 	mov.w	sl, #0
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4604      	mov	r4, r0
 800379e:	460d      	mov	r5, r1
 80037a0:	4630      	mov	r0, r6
 80037a2:	4639      	mov	r1, r7
 80037a4:	f7fc fcda 	bl	800015c <__adddf3>
 80037a8:	4632      	mov	r2, r6
 80037aa:	463b      	mov	r3, r7
 80037ac:	4650      	mov	r0, sl
 80037ae:	468b      	mov	fp, r1
 80037b0:	f7fc fcd2 	bl	8000158 <__aeabi_dsub>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4620      	mov	r0, r4
 80037ba:	4629      	mov	r1, r5
 80037bc:	f7fc fccc 	bl	8000158 <__aeabi_dsub>
 80037c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80037c4:	9b00      	ldr	r3, [sp, #0]
 80037c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037c8:	3b01      	subs	r3, #1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f04f 0600 	mov.w	r6, #0
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	bf0c      	ite	eq
 80037d6:	4b31      	ldreq	r3, [pc, #196]	; (800389c <__ieee754_pow+0x3cc>)
 80037d8:	4b2d      	ldrne	r3, [pc, #180]	; (8003890 <__ieee754_pow+0x3c0>)
 80037da:	4604      	mov	r4, r0
 80037dc:	460d      	mov	r5, r1
 80037de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037e2:	e9cd 2300 	strd	r2, r3, [sp]
 80037e6:	4632      	mov	r2, r6
 80037e8:	463b      	mov	r3, r7
 80037ea:	f7fc fcb5 	bl	8000158 <__aeabi_dsub>
 80037ee:	4652      	mov	r2, sl
 80037f0:	465b      	mov	r3, fp
 80037f2:	f7fc fe69 	bl	80004c8 <__aeabi_dmul>
 80037f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80037fa:	4680      	mov	r8, r0
 80037fc:	4689      	mov	r9, r1
 80037fe:	4620      	mov	r0, r4
 8003800:	4629      	mov	r1, r5
 8003802:	f7fc fe61 	bl	80004c8 <__aeabi_dmul>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4640      	mov	r0, r8
 800380c:	4649      	mov	r1, r9
 800380e:	f7fc fca5 	bl	800015c <__adddf3>
 8003812:	4632      	mov	r2, r6
 8003814:	463b      	mov	r3, r7
 8003816:	4680      	mov	r8, r0
 8003818:	4689      	mov	r9, r1
 800381a:	4650      	mov	r0, sl
 800381c:	4659      	mov	r1, fp
 800381e:	f7fc fe53 	bl	80004c8 <__aeabi_dmul>
 8003822:	4604      	mov	r4, r0
 8003824:	460d      	mov	r5, r1
 8003826:	460b      	mov	r3, r1
 8003828:	4602      	mov	r2, r0
 800382a:	4649      	mov	r1, r9
 800382c:	4640      	mov	r0, r8
 800382e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003832:	f7fc fc93 	bl	800015c <__adddf3>
 8003836:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <__ieee754_pow+0x3d0>)
 8003838:	4682      	mov	sl, r0
 800383a:	4299      	cmp	r1, r3
 800383c:	460f      	mov	r7, r1
 800383e:	460e      	mov	r6, r1
 8003840:	f340 82ed 	ble.w	8003e1e <__ieee754_pow+0x94e>
 8003844:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003848:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800384c:	4303      	orrs	r3, r0
 800384e:	f000 81e7 	beq.w	8003c20 <__ieee754_pow+0x750>
 8003852:	a30d      	add	r3, pc, #52	; (adr r3, 8003888 <__ieee754_pow+0x3b8>)
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800385c:	f7fc fe34 	bl	80004c8 <__aeabi_dmul>
 8003860:	a309      	add	r3, pc, #36	; (adr r3, 8003888 <__ieee754_pow+0x3b8>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	e6cc      	b.n	8003602 <__ieee754_pow+0x132>
 8003868:	60000000 	.word	0x60000000
 800386c:	3ff71547 	.word	0x3ff71547
 8003870:	f85ddf44 	.word	0xf85ddf44
 8003874:	3e54ae0b 	.word	0x3e54ae0b
 8003878:	55555555 	.word	0x55555555
 800387c:	3fd55555 	.word	0x3fd55555
 8003880:	652b82fe 	.word	0x652b82fe
 8003884:	3ff71547 	.word	0x3ff71547
 8003888:	8800759c 	.word	0x8800759c
 800388c:	7e37e43c 	.word	0x7e37e43c
 8003890:	3ff00000 	.word	0x3ff00000
 8003894:	3fd00000 	.word	0x3fd00000
 8003898:	3fe00000 	.word	0x3fe00000
 800389c:	bff00000 	.word	0xbff00000
 80038a0:	408fffff 	.word	0x408fffff
 80038a4:	4bd4      	ldr	r3, [pc, #848]	; (8003bf8 <__ieee754_pow+0x728>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	ea09 0303 	and.w	r3, r9, r3
 80038ac:	b943      	cbnz	r3, 80038c0 <__ieee754_pow+0x3f0>
 80038ae:	4658      	mov	r0, fp
 80038b0:	4661      	mov	r1, ip
 80038b2:	4bd2      	ldr	r3, [pc, #840]	; (8003bfc <__ieee754_pow+0x72c>)
 80038b4:	f7fc fe08 	bl	80004c8 <__aeabi_dmul>
 80038b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80038bc:	4683      	mov	fp, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	1523      	asrs	r3, r4, #20
 80038c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80038c6:	4413      	add	r3, r2
 80038c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ca:	4bcd      	ldr	r3, [pc, #820]	; (8003c00 <__ieee754_pow+0x730>)
 80038cc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80038d0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80038d4:	429c      	cmp	r4, r3
 80038d6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80038da:	dd08      	ble.n	80038ee <__ieee754_pow+0x41e>
 80038dc:	4bc9      	ldr	r3, [pc, #804]	; (8003c04 <__ieee754_pow+0x734>)
 80038de:	429c      	cmp	r4, r3
 80038e0:	f340 819c 	ble.w	8003c1c <__ieee754_pow+0x74c>
 80038e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80038ea:	3301      	adds	r3, #1
 80038ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ee:	2600      	movs	r6, #0
 80038f0:	00f3      	lsls	r3, r6, #3
 80038f2:	930d      	str	r3, [sp, #52]	; 0x34
 80038f4:	4bc4      	ldr	r3, [pc, #784]	; (8003c08 <__ieee754_pow+0x738>)
 80038f6:	4658      	mov	r0, fp
 80038f8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80038fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003900:	4629      	mov	r1, r5
 8003902:	461a      	mov	r2, r3
 8003904:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003908:	4623      	mov	r3, r4
 800390a:	f7fc fc25 	bl	8000158 <__aeabi_dsub>
 800390e:	46da      	mov	sl, fp
 8003910:	462b      	mov	r3, r5
 8003912:	4652      	mov	r2, sl
 8003914:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003918:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800391c:	f7fc fc1e 	bl	800015c <__adddf3>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	2000      	movs	r0, #0
 8003926:	49b9      	ldr	r1, [pc, #740]	; (8003c0c <__ieee754_pow+0x73c>)
 8003928:	f7fc fef8 	bl	800071c <__aeabi_ddiv>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003934:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003938:	f7fc fdc6 	bl	80004c8 <__aeabi_dmul>
 800393c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003940:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003944:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003948:	2300      	movs	r3, #0
 800394a:	2200      	movs	r2, #0
 800394c:	46ab      	mov	fp, r5
 800394e:	106d      	asrs	r5, r5, #1
 8003950:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003954:	9304      	str	r3, [sp, #16]
 8003956:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800395a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800395e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003962:	4640      	mov	r0, r8
 8003964:	4649      	mov	r1, r9
 8003966:	4614      	mov	r4, r2
 8003968:	461d      	mov	r5, r3
 800396a:	f7fc fdad 	bl	80004c8 <__aeabi_dmul>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003976:	f7fc fbef 	bl	8000158 <__aeabi_dsub>
 800397a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800397e:	4606      	mov	r6, r0
 8003980:	460f      	mov	r7, r1
 8003982:	4620      	mov	r0, r4
 8003984:	4629      	mov	r1, r5
 8003986:	f7fc fbe7 	bl	8000158 <__aeabi_dsub>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4650      	mov	r0, sl
 8003990:	4659      	mov	r1, fp
 8003992:	f7fc fbe1 	bl	8000158 <__aeabi_dsub>
 8003996:	4642      	mov	r2, r8
 8003998:	464b      	mov	r3, r9
 800399a:	f7fc fd95 	bl	80004c8 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4630      	mov	r0, r6
 80039a4:	4639      	mov	r1, r7
 80039a6:	f7fc fbd7 	bl	8000158 <__aeabi_dsub>
 80039aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80039ae:	f7fc fd8b 	bl	80004c8 <__aeabi_dmul>
 80039b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	f7fc fd83 	bl	80004c8 <__aeabi_dmul>
 80039c2:	a37b      	add	r3, pc, #492	; (adr r3, 8003bb0 <__ieee754_pow+0x6e0>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	4604      	mov	r4, r0
 80039ca:	460d      	mov	r5, r1
 80039cc:	f7fc fd7c 	bl	80004c8 <__aeabi_dmul>
 80039d0:	a379      	add	r3, pc, #484	; (adr r3, 8003bb8 <__ieee754_pow+0x6e8>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f7fc fbc1 	bl	800015c <__adddf3>
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	f7fc fd73 	bl	80004c8 <__aeabi_dmul>
 80039e2:	a377      	add	r3, pc, #476	; (adr r3, 8003bc0 <__ieee754_pow+0x6f0>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f7fc fbb8 	bl	800015c <__adddf3>
 80039ec:	4622      	mov	r2, r4
 80039ee:	462b      	mov	r3, r5
 80039f0:	f7fc fd6a 	bl	80004c8 <__aeabi_dmul>
 80039f4:	a374      	add	r3, pc, #464	; (adr r3, 8003bc8 <__ieee754_pow+0x6f8>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f7fc fbaf 	bl	800015c <__adddf3>
 80039fe:	4622      	mov	r2, r4
 8003a00:	462b      	mov	r3, r5
 8003a02:	f7fc fd61 	bl	80004c8 <__aeabi_dmul>
 8003a06:	a372      	add	r3, pc, #456	; (adr r3, 8003bd0 <__ieee754_pow+0x700>)
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f7fc fba6 	bl	800015c <__adddf3>
 8003a10:	4622      	mov	r2, r4
 8003a12:	462b      	mov	r3, r5
 8003a14:	f7fc fd58 	bl	80004c8 <__aeabi_dmul>
 8003a18:	a36f      	add	r3, pc, #444	; (adr r3, 8003bd8 <__ieee754_pow+0x708>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fb9d 	bl	800015c <__adddf3>
 8003a22:	4622      	mov	r2, r4
 8003a24:	4606      	mov	r6, r0
 8003a26:	460f      	mov	r7, r1
 8003a28:	462b      	mov	r3, r5
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	f7fc fd4b 	bl	80004c8 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4630      	mov	r0, r6
 8003a38:	4639      	mov	r1, r7
 8003a3a:	f7fc fd45 	bl	80004c8 <__aeabi_dmul>
 8003a3e:	4604      	mov	r4, r0
 8003a40:	460d      	mov	r5, r1
 8003a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a46:	4642      	mov	r2, r8
 8003a48:	464b      	mov	r3, r9
 8003a4a:	f7fc fb87 	bl	800015c <__adddf3>
 8003a4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a52:	f7fc fd39 	bl	80004c8 <__aeabi_dmul>
 8003a56:	4622      	mov	r2, r4
 8003a58:	462b      	mov	r3, r5
 8003a5a:	f7fc fb7f 	bl	800015c <__adddf3>
 8003a5e:	4642      	mov	r2, r8
 8003a60:	4606      	mov	r6, r0
 8003a62:	460f      	mov	r7, r1
 8003a64:	464b      	mov	r3, r9
 8003a66:	4640      	mov	r0, r8
 8003a68:	4649      	mov	r1, r9
 8003a6a:	f7fc fd2d 	bl	80004c8 <__aeabi_dmul>
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <__ieee754_pow+0x740>)
 8003a72:	4682      	mov	sl, r0
 8003a74:	468b      	mov	fp, r1
 8003a76:	f7fc fb71 	bl	800015c <__adddf3>
 8003a7a:	4632      	mov	r2, r6
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	f7fc fb6d 	bl	800015c <__adddf3>
 8003a82:	9c04      	ldr	r4, [sp, #16]
 8003a84:	460d      	mov	r5, r1
 8003a86:	4622      	mov	r2, r4
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	f7fc fd1b 	bl	80004c8 <__aeabi_dmul>
 8003a92:	2200      	movs	r2, #0
 8003a94:	4680      	mov	r8, r0
 8003a96:	4689      	mov	r9, r1
 8003a98:	4620      	mov	r0, r4
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	4b5c      	ldr	r3, [pc, #368]	; (8003c10 <__ieee754_pow+0x740>)
 8003a9e:	f7fc fb5b 	bl	8000158 <__aeabi_dsub>
 8003aa2:	4652      	mov	r2, sl
 8003aa4:	465b      	mov	r3, fp
 8003aa6:	f7fc fb57 	bl	8000158 <__aeabi_dsub>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4630      	mov	r0, r6
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	f7fc fb51 	bl	8000158 <__aeabi_dsub>
 8003ab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003aba:	f7fc fd05 	bl	80004c8 <__aeabi_dmul>
 8003abe:	4622      	mov	r2, r4
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	460f      	mov	r7, r1
 8003ac4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ac8:	462b      	mov	r3, r5
 8003aca:	f7fc fcfd 	bl	80004c8 <__aeabi_dmul>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	4639      	mov	r1, r7
 8003ad6:	f7fc fb41 	bl	800015c <__adddf3>
 8003ada:	4606      	mov	r6, r0
 8003adc:	460f      	mov	r7, r1
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	f7fc fb39 	bl	800015c <__adddf3>
 8003aea:	a33d      	add	r3, pc, #244	; (adr r3, 8003be0 <__ieee754_pow+0x710>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	9c04      	ldr	r4, [sp, #16]
 8003af2:	460d      	mov	r5, r1
 8003af4:	4620      	mov	r0, r4
 8003af6:	f7fc fce7 	bl	80004c8 <__aeabi_dmul>
 8003afa:	4642      	mov	r2, r8
 8003afc:	464b      	mov	r3, r9
 8003afe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b02:	4620      	mov	r0, r4
 8003b04:	4629      	mov	r1, r5
 8003b06:	f7fc fb27 	bl	8000158 <__aeabi_dsub>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4630      	mov	r0, r6
 8003b10:	4639      	mov	r1, r7
 8003b12:	f7fc fb21 	bl	8000158 <__aeabi_dsub>
 8003b16:	a334      	add	r3, pc, #208	; (adr r3, 8003be8 <__ieee754_pow+0x718>)
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f7fc fcd4 	bl	80004c8 <__aeabi_dmul>
 8003b20:	a333      	add	r3, pc, #204	; (adr r3, 8003bf0 <__ieee754_pow+0x720>)
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	4606      	mov	r6, r0
 8003b28:	460f      	mov	r7, r1
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	f7fc fccb 	bl	80004c8 <__aeabi_dmul>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4630      	mov	r0, r6
 8003b38:	4639      	mov	r1, r7
 8003b3a:	f7fc fb0f 	bl	800015c <__adddf3>
 8003b3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003b40:	4b34      	ldr	r3, [pc, #208]	; (8003c14 <__ieee754_pow+0x744>)
 8003b42:	4413      	add	r3, r2
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f7fc fb08 	bl	800015c <__adddf3>
 8003b4c:	4680      	mov	r8, r0
 8003b4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b50:	4689      	mov	r9, r1
 8003b52:	f7fc fc4f 	bl	80003f4 <__aeabi_i2d>
 8003b56:	4604      	mov	r4, r0
 8003b58:	460d      	mov	r5, r1
 8003b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003b5c:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <__ieee754_pow+0x748>)
 8003b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b62:	4413      	add	r3, r2
 8003b64:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	f7fc faf6 	bl	800015c <__adddf3>
 8003b70:	4632      	mov	r2, r6
 8003b72:	463b      	mov	r3, r7
 8003b74:	f7fc faf2 	bl	800015c <__adddf3>
 8003b78:	4622      	mov	r2, r4
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	f7fc faee 	bl	800015c <__adddf3>
 8003b80:	f8dd a010 	ldr.w	sl, [sp, #16]
 8003b84:	4622      	mov	r2, r4
 8003b86:	462b      	mov	r3, r5
 8003b88:	4650      	mov	r0, sl
 8003b8a:	468b      	mov	fp, r1
 8003b8c:	f7fc fae4 	bl	8000158 <__aeabi_dsub>
 8003b90:	4632      	mov	r2, r6
 8003b92:	463b      	mov	r3, r7
 8003b94:	f7fc fae0 	bl	8000158 <__aeabi_dsub>
 8003b98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b9c:	f7fc fadc 	bl	8000158 <__aeabi_dsub>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4640      	mov	r0, r8
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	e608      	b.n	80037bc <__ieee754_pow+0x2ec>
 8003baa:	bf00      	nop
 8003bac:	f3af 8000 	nop.w
 8003bb0:	4a454eef 	.word	0x4a454eef
 8003bb4:	3fca7e28 	.word	0x3fca7e28
 8003bb8:	93c9db65 	.word	0x93c9db65
 8003bbc:	3fcd864a 	.word	0x3fcd864a
 8003bc0:	a91d4101 	.word	0xa91d4101
 8003bc4:	3fd17460 	.word	0x3fd17460
 8003bc8:	518f264d 	.word	0x518f264d
 8003bcc:	3fd55555 	.word	0x3fd55555
 8003bd0:	db6fabff 	.word	0xdb6fabff
 8003bd4:	3fdb6db6 	.word	0x3fdb6db6
 8003bd8:	33333303 	.word	0x33333303
 8003bdc:	3fe33333 	.word	0x3fe33333
 8003be0:	e0000000 	.word	0xe0000000
 8003be4:	3feec709 	.word	0x3feec709
 8003be8:	dc3a03fd 	.word	0xdc3a03fd
 8003bec:	3feec709 	.word	0x3feec709
 8003bf0:	145b01f5 	.word	0x145b01f5
 8003bf4:	be3e2fe0 	.word	0xbe3e2fe0
 8003bf8:	7ff00000 	.word	0x7ff00000
 8003bfc:	43400000 	.word	0x43400000
 8003c00:	0003988e 	.word	0x0003988e
 8003c04:	000bb679 	.word	0x000bb679
 8003c08:	080042d8 	.word	0x080042d8
 8003c0c:	3ff00000 	.word	0x3ff00000
 8003c10:	40080000 	.word	0x40080000
 8003c14:	080042f8 	.word	0x080042f8
 8003c18:	080042e8 	.word	0x080042e8
 8003c1c:	2601      	movs	r6, #1
 8003c1e:	e667      	b.n	80038f0 <__ieee754_pow+0x420>
 8003c20:	a39d      	add	r3, pc, #628	; (adr r3, 8003e98 <__ieee754_pow+0x9c8>)
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	4640      	mov	r0, r8
 8003c28:	4649      	mov	r1, r9
 8003c2a:	f7fc fa97 	bl	800015c <__adddf3>
 8003c2e:	4622      	mov	r2, r4
 8003c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c34:	462b      	mov	r3, r5
 8003c36:	4650      	mov	r0, sl
 8003c38:	4639      	mov	r1, r7
 8003c3a:	f7fc fa8d 	bl	8000158 <__aeabi_dsub>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c46:	f7fc fecf 	bl	80009e8 <__aeabi_dcmpgt>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	f47f ae01 	bne.w	8003852 <__ieee754_pow+0x382>
 8003c50:	4aa5      	ldr	r2, [pc, #660]	; (8003ee8 <__ieee754_pow+0xa18>)
 8003c52:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003c56:	4293      	cmp	r3, r2
 8003c58:	f340 8103 	ble.w	8003e62 <__ieee754_pow+0x992>
 8003c5c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003c60:	2000      	movs	r0, #0
 8003c62:	151b      	asrs	r3, r3, #20
 8003c64:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003c68:	fa4a f303 	asr.w	r3, sl, r3
 8003c6c:	4433      	add	r3, r6
 8003c6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003c72:	4f9e      	ldr	r7, [pc, #632]	; (8003eec <__ieee754_pow+0xa1c>)
 8003c74:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003c78:	4117      	asrs	r7, r2
 8003c7a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003c7e:	ea23 0107 	bic.w	r1, r3, r7
 8003c82:	f1c2 0214 	rsb	r2, r2, #20
 8003c86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	fa4a fa02 	asr.w	sl, sl, r2
 8003c90:	2e00      	cmp	r6, #0
 8003c92:	4602      	mov	r2, r0
 8003c94:	4629      	mov	r1, r5
 8003c96:	4620      	mov	r0, r4
 8003c98:	bfb8      	it	lt
 8003c9a:	f1ca 0a00 	rsblt	sl, sl, #0
 8003c9e:	f7fc fa5b 	bl	8000158 <__aeabi_dsub>
 8003ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003caa:	2400      	movs	r4, #0
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	f7fc fa54 	bl	800015c <__adddf3>
 8003cb4:	a37a      	add	r3, pc, #488	; (adr r3, 8003ea0 <__ieee754_pow+0x9d0>)
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	4620      	mov	r0, r4
 8003cbc:	460d      	mov	r5, r1
 8003cbe:	f7fc fc03 	bl	80004c8 <__aeabi_dmul>
 8003cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460f      	mov	r7, r1
 8003cca:	4620      	mov	r0, r4
 8003ccc:	4629      	mov	r1, r5
 8003cce:	f7fc fa43 	bl	8000158 <__aeabi_dsub>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	4649      	mov	r1, r9
 8003cda:	f7fc fa3d 	bl	8000158 <__aeabi_dsub>
 8003cde:	a372      	add	r3, pc, #456	; (adr r3, 8003ea8 <__ieee754_pow+0x9d8>)
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f7fc fbf0 	bl	80004c8 <__aeabi_dmul>
 8003ce8:	a371      	add	r3, pc, #452	; (adr r3, 8003eb0 <__ieee754_pow+0x9e0>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	4680      	mov	r8, r0
 8003cf0:	4689      	mov	r9, r1
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	f7fc fbe7 	bl	80004c8 <__aeabi_dmul>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4640      	mov	r0, r8
 8003d00:	4649      	mov	r1, r9
 8003d02:	f7fc fa2b 	bl	800015c <__adddf3>
 8003d06:	4604      	mov	r4, r0
 8003d08:	460d      	mov	r5, r1
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4630      	mov	r0, r6
 8003d10:	4639      	mov	r1, r7
 8003d12:	f7fc fa23 	bl	800015c <__adddf3>
 8003d16:	4632      	mov	r2, r6
 8003d18:	463b      	mov	r3, r7
 8003d1a:	4680      	mov	r8, r0
 8003d1c:	4689      	mov	r9, r1
 8003d1e:	f7fc fa1b 	bl	8000158 <__aeabi_dsub>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4620      	mov	r0, r4
 8003d28:	4629      	mov	r1, r5
 8003d2a:	f7fc fa15 	bl	8000158 <__aeabi_dsub>
 8003d2e:	4642      	mov	r2, r8
 8003d30:	4606      	mov	r6, r0
 8003d32:	460f      	mov	r7, r1
 8003d34:	464b      	mov	r3, r9
 8003d36:	4640      	mov	r0, r8
 8003d38:	4649      	mov	r1, r9
 8003d3a:	f7fc fbc5 	bl	80004c8 <__aeabi_dmul>
 8003d3e:	a35e      	add	r3, pc, #376	; (adr r3, 8003eb8 <__ieee754_pow+0x9e8>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	4604      	mov	r4, r0
 8003d46:	460d      	mov	r5, r1
 8003d48:	f7fc fbbe 	bl	80004c8 <__aeabi_dmul>
 8003d4c:	a35c      	add	r3, pc, #368	; (adr r3, 8003ec0 <__ieee754_pow+0x9f0>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f7fc fa01 	bl	8000158 <__aeabi_dsub>
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	f7fc fbb5 	bl	80004c8 <__aeabi_dmul>
 8003d5e:	a35a      	add	r3, pc, #360	; (adr r3, 8003ec8 <__ieee754_pow+0x9f8>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc f9fa 	bl	800015c <__adddf3>
 8003d68:	4622      	mov	r2, r4
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	f7fc fbac 	bl	80004c8 <__aeabi_dmul>
 8003d70:	a357      	add	r3, pc, #348	; (adr r3, 8003ed0 <__ieee754_pow+0xa00>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f7fc f9ef 	bl	8000158 <__aeabi_dsub>
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	f7fc fba3 	bl	80004c8 <__aeabi_dmul>
 8003d82:	a355      	add	r3, pc, #340	; (adr r3, 8003ed8 <__ieee754_pow+0xa08>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f7fc f9e8 	bl	800015c <__adddf3>
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	462b      	mov	r3, r5
 8003d90:	f7fc fb9a 	bl	80004c8 <__aeabi_dmul>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4640      	mov	r0, r8
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	f7fc f9dc 	bl	8000158 <__aeabi_dsub>
 8003da0:	4604      	mov	r4, r0
 8003da2:	460d      	mov	r5, r1
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4640      	mov	r0, r8
 8003daa:	4649      	mov	r1, r9
 8003dac:	f7fc fb8c 	bl	80004c8 <__aeabi_dmul>
 8003db0:	2200      	movs	r2, #0
 8003db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f7fc f9cb 	bl	8000158 <__aeabi_dsub>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dca:	f7fc fca7 	bl	800071c <__aeabi_ddiv>
 8003dce:	4632      	mov	r2, r6
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	460d      	mov	r5, r1
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	4649      	mov	r1, r9
 8003dda:	f7fc fb75 	bl	80004c8 <__aeabi_dmul>
 8003dde:	4632      	mov	r2, r6
 8003de0:	463b      	mov	r3, r7
 8003de2:	f7fc f9bb 	bl	800015c <__adddf3>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4620      	mov	r0, r4
 8003dec:	4629      	mov	r1, r5
 8003dee:	f7fc f9b3 	bl	8000158 <__aeabi_dsub>
 8003df2:	4642      	mov	r2, r8
 8003df4:	464b      	mov	r3, r9
 8003df6:	f7fc f9af 	bl	8000158 <__aeabi_dsub>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	2000      	movs	r0, #0
 8003e00:	493b      	ldr	r1, [pc, #236]	; (8003ef0 <__ieee754_pow+0xa20>)
 8003e02:	f7fc f9a9 	bl	8000158 <__aeabi_dsub>
 8003e06:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003e0a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003e0e:	da2b      	bge.n	8003e68 <__ieee754_pow+0x998>
 8003e10:	4652      	mov	r2, sl
 8003e12:	f000 f9b9 	bl	8004188 <scalbn>
 8003e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e1a:	f7ff bbf2 	b.w	8003602 <__ieee754_pow+0x132>
 8003e1e:	4b35      	ldr	r3, [pc, #212]	; (8003ef4 <__ieee754_pow+0xa24>)
 8003e20:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003e24:	429f      	cmp	r7, r3
 8003e26:	f77f af13 	ble.w	8003c50 <__ieee754_pow+0x780>
 8003e2a:	4b33      	ldr	r3, [pc, #204]	; (8003ef8 <__ieee754_pow+0xa28>)
 8003e2c:	440b      	add	r3, r1
 8003e2e:	4303      	orrs	r3, r0
 8003e30:	d00b      	beq.n	8003e4a <__ieee754_pow+0x97a>
 8003e32:	a32b      	add	r3, pc, #172	; (adr r3, 8003ee0 <__ieee754_pow+0xa10>)
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e3c:	f7fc fb44 	bl	80004c8 <__aeabi_dmul>
 8003e40:	a327      	add	r3, pc, #156	; (adr r3, 8003ee0 <__ieee754_pow+0xa10>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f7ff bbdc 	b.w	8003602 <__ieee754_pow+0x132>
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	462b      	mov	r3, r5
 8003e4e:	f7fc f983 	bl	8000158 <__aeabi_dsub>
 8003e52:	4642      	mov	r2, r8
 8003e54:	464b      	mov	r3, r9
 8003e56:	f7fc fdbd 	bl	80009d4 <__aeabi_dcmpge>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	f43f aef8 	beq.w	8003c50 <__ieee754_pow+0x780>
 8003e60:	e7e7      	b.n	8003e32 <__ieee754_pow+0x962>
 8003e62:	f04f 0a00 	mov.w	sl, #0
 8003e66:	e71e      	b.n	8003ca6 <__ieee754_pow+0x7d6>
 8003e68:	4621      	mov	r1, r4
 8003e6a:	e7d4      	b.n	8003e16 <__ieee754_pow+0x946>
 8003e6c:	f04f 0b00 	mov.w	fp, #0
 8003e70:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8003ef0 <__ieee754_pow+0xa20>
 8003e74:	f7ff bbb0 	b.w	80035d8 <__ieee754_pow+0x108>
 8003e78:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003e7c:	f7ff bbac 	b.w	80035d8 <__ieee754_pow+0x108>
 8003e80:	4638      	mov	r0, r7
 8003e82:	4641      	mov	r1, r8
 8003e84:	f7ff bbbf 	b.w	8003606 <__ieee754_pow+0x136>
 8003e88:	9200      	str	r2, [sp, #0]
 8003e8a:	f7ff bb7f 	b.w	800358c <__ieee754_pow+0xbc>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f7ff bb69 	b.w	8003566 <__ieee754_pow+0x96>
 8003e94:	f3af 8000 	nop.w
 8003e98:	652b82fe 	.word	0x652b82fe
 8003e9c:	3c971547 	.word	0x3c971547
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	3fe62e43 	.word	0x3fe62e43
 8003ea8:	fefa39ef 	.word	0xfefa39ef
 8003eac:	3fe62e42 	.word	0x3fe62e42
 8003eb0:	0ca86c39 	.word	0x0ca86c39
 8003eb4:	be205c61 	.word	0xbe205c61
 8003eb8:	72bea4d0 	.word	0x72bea4d0
 8003ebc:	3e663769 	.word	0x3e663769
 8003ec0:	c5d26bf1 	.word	0xc5d26bf1
 8003ec4:	3ebbbd41 	.word	0x3ebbbd41
 8003ec8:	af25de2c 	.word	0xaf25de2c
 8003ecc:	3f11566a 	.word	0x3f11566a
 8003ed0:	16bebd93 	.word	0x16bebd93
 8003ed4:	3f66c16c 	.word	0x3f66c16c
 8003ed8:	5555553e 	.word	0x5555553e
 8003edc:	3fc55555 	.word	0x3fc55555
 8003ee0:	c2f8f359 	.word	0xc2f8f359
 8003ee4:	01a56e1f 	.word	0x01a56e1f
 8003ee8:	3fe00000 	.word	0x3fe00000
 8003eec:	000fffff 	.word	0x000fffff
 8003ef0:	3ff00000 	.word	0x3ff00000
 8003ef4:	4090cbff 	.word	0x4090cbff
 8003ef8:	3f6f3400 	.word	0x3f6f3400

08003efc <__ieee754_sqrt>:
 8003efc:	f8df c150 	ldr.w	ip, [pc, #336]	; 8004050 <__ieee754_sqrt+0x154>
 8003f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f04:	ea3c 0c01 	bics.w	ip, ip, r1
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	460d      	mov	r5, r1
 8003f0e:	460a      	mov	r2, r1
 8003f10:	4607      	mov	r7, r0
 8003f12:	4604      	mov	r4, r0
 8003f14:	d10e      	bne.n	8003f34 <__ieee754_sqrt+0x38>
 8003f16:	4602      	mov	r2, r0
 8003f18:	f7fc fad6 	bl	80004c8 <__aeabi_dmul>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4630      	mov	r0, r6
 8003f22:	4629      	mov	r1, r5
 8003f24:	f7fc f91a 	bl	800015c <__adddf3>
 8003f28:	4606      	mov	r6, r0
 8003f2a:	460d      	mov	r5, r1
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	4629      	mov	r1, r5
 8003f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f34:	2900      	cmp	r1, #0
 8003f36:	dc0d      	bgt.n	8003f54 <__ieee754_sqrt+0x58>
 8003f38:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003f3c:	ea5c 0707 	orrs.w	r7, ip, r7
 8003f40:	d0f4      	beq.n	8003f2c <__ieee754_sqrt+0x30>
 8003f42:	b139      	cbz	r1, 8003f54 <__ieee754_sqrt+0x58>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f7fc f907 	bl	8000158 <__aeabi_dsub>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	f7fc fbe5 	bl	800071c <__aeabi_ddiv>
 8003f52:	e7e9      	b.n	8003f28 <__ieee754_sqrt+0x2c>
 8003f54:	1512      	asrs	r2, r2, #20
 8003f56:	d074      	beq.n	8004042 <__ieee754_sqrt+0x146>
 8003f58:	2000      	movs	r0, #0
 8003f5a:	07d5      	lsls	r5, r2, #31
 8003f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f60:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8003f64:	bf5e      	ittt	pl
 8003f66:	0fe3      	lsrpl	r3, r4, #31
 8003f68:	0064      	lslpl	r4, r4, #1
 8003f6a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8003f6e:	0fe3      	lsrs	r3, r4, #31
 8003f70:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003f74:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8003f78:	2516      	movs	r5, #22
 8003f7a:	4601      	mov	r1, r0
 8003f7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003f80:	1076      	asrs	r6, r6, #1
 8003f82:	0064      	lsls	r4, r4, #1
 8003f84:	188f      	adds	r7, r1, r2
 8003f86:	429f      	cmp	r7, r3
 8003f88:	bfde      	ittt	le
 8003f8a:	1bdb      	suble	r3, r3, r7
 8003f8c:	18b9      	addle	r1, r7, r2
 8003f8e:	1880      	addle	r0, r0, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	3d01      	subs	r5, #1
 8003f94:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003f98:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003f9c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003fa0:	d1f0      	bne.n	8003f84 <__ieee754_sqrt+0x88>
 8003fa2:	462a      	mov	r2, r5
 8003fa4:	f04f 0e20 	mov.w	lr, #32
 8003fa8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003fac:	428b      	cmp	r3, r1
 8003fae:	eb07 0c05 	add.w	ip, r7, r5
 8003fb2:	dc02      	bgt.n	8003fba <__ieee754_sqrt+0xbe>
 8003fb4:	d113      	bne.n	8003fde <__ieee754_sqrt+0xe2>
 8003fb6:	45a4      	cmp	ip, r4
 8003fb8:	d811      	bhi.n	8003fde <__ieee754_sqrt+0xe2>
 8003fba:	f1bc 0f00 	cmp.w	ip, #0
 8003fbe:	eb0c 0507 	add.w	r5, ip, r7
 8003fc2:	da43      	bge.n	800404c <__ieee754_sqrt+0x150>
 8003fc4:	2d00      	cmp	r5, #0
 8003fc6:	db41      	blt.n	800404c <__ieee754_sqrt+0x150>
 8003fc8:	f101 0801 	add.w	r8, r1, #1
 8003fcc:	1a5b      	subs	r3, r3, r1
 8003fce:	4641      	mov	r1, r8
 8003fd0:	45a4      	cmp	ip, r4
 8003fd2:	bf88      	it	hi
 8003fd4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003fd8:	eba4 040c 	sub.w	r4, r4, ip
 8003fdc:	443a      	add	r2, r7
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	f1be 0e01 	subs.w	lr, lr, #1
 8003fe4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003fe8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8003fec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003ff0:	d1dc      	bne.n	8003fac <__ieee754_sqrt+0xb0>
 8003ff2:	4323      	orrs	r3, r4
 8003ff4:	d006      	beq.n	8004004 <__ieee754_sqrt+0x108>
 8003ff6:	1c54      	adds	r4, r2, #1
 8003ff8:	bf0b      	itete	eq
 8003ffa:	4672      	moveq	r2, lr
 8003ffc:	3201      	addne	r2, #1
 8003ffe:	3001      	addeq	r0, #1
 8004000:	f022 0201 	bicne.w	r2, r2, #1
 8004004:	1043      	asrs	r3, r0, #1
 8004006:	07c1      	lsls	r1, r0, #31
 8004008:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800400c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004010:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004014:	bf48      	it	mi
 8004016:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800401a:	4610      	mov	r0, r2
 800401c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8004020:	e782      	b.n	8003f28 <__ieee754_sqrt+0x2c>
 8004022:	0ae3      	lsrs	r3, r4, #11
 8004024:	3915      	subs	r1, #21
 8004026:	0564      	lsls	r4, r4, #21
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0fa      	beq.n	8004022 <__ieee754_sqrt+0x126>
 800402c:	02de      	lsls	r6, r3, #11
 800402e:	d50a      	bpl.n	8004046 <__ieee754_sqrt+0x14a>
 8004030:	f1c2 0020 	rsb	r0, r2, #32
 8004034:	fa24 f000 	lsr.w	r0, r4, r0
 8004038:	1e55      	subs	r5, r2, #1
 800403a:	4094      	lsls	r4, r2
 800403c:	4303      	orrs	r3, r0
 800403e:	1b4a      	subs	r2, r1, r5
 8004040:	e78a      	b.n	8003f58 <__ieee754_sqrt+0x5c>
 8004042:	4611      	mov	r1, r2
 8004044:	e7f0      	b.n	8004028 <__ieee754_sqrt+0x12c>
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	3201      	adds	r2, #1
 800404a:	e7ef      	b.n	800402c <__ieee754_sqrt+0x130>
 800404c:	4688      	mov	r8, r1
 800404e:	e7bd      	b.n	8003fcc <__ieee754_sqrt+0xd0>
 8004050:	7ff00000 	.word	0x7ff00000

08004054 <fabs>:
 8004054:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004058:	4770      	bx	lr

0800405a <finite>:
 800405a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800405e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004062:	0fc0      	lsrs	r0, r0, #31
 8004064:	4770      	bx	lr
	...

08004068 <nan>:
 8004068:	2000      	movs	r0, #0
 800406a:	4901      	ldr	r1, [pc, #4]	; (8004070 <nan+0x8>)
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	7ff80000 	.word	0x7ff80000

08004074 <rint>:
 8004074:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8004078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800407a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800407e:	2f13      	cmp	r7, #19
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	460c      	mov	r4, r1
 8004086:	4605      	mov	r5, r0
 8004088:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800408c:	dc59      	bgt.n	8004142 <rint+0xce>
 800408e:	2f00      	cmp	r7, #0
 8004090:	da2a      	bge.n	80040e8 <rint+0x74>
 8004092:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004096:	4301      	orrs	r1, r0
 8004098:	d022      	beq.n	80040e0 <rint+0x6c>
 800409a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800409e:	4301      	orrs	r1, r0
 80040a0:	424d      	negs	r5, r1
 80040a2:	430d      	orrs	r5, r1
 80040a4:	4936      	ldr	r1, [pc, #216]	; (8004180 <rint+0x10c>)
 80040a6:	0c5c      	lsrs	r4, r3, #17
 80040a8:	0b2d      	lsrs	r5, r5, #12
 80040aa:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80040ae:	0464      	lsls	r4, r4, #17
 80040b0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80040b4:	ea45 0304 	orr.w	r3, r5, r4
 80040b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80040bc:	4620      	mov	r0, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	f7fc f84c 	bl	800015c <__adddf3>
 80040c4:	e9cd 0100 	strd	r0, r1, [sp]
 80040c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040cc:	462b      	mov	r3, r5
 80040ce:	4622      	mov	r2, r4
 80040d0:	f7fc f842 	bl	8000158 <__aeabi_dsub>
 80040d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80040d8:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	b003      	add	sp, #12
 80040e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e8:	4926      	ldr	r1, [pc, #152]	; (8004184 <rint+0x110>)
 80040ea:	4139      	asrs	r1, r7
 80040ec:	ea03 0001 	and.w	r0, r3, r1
 80040f0:	4310      	orrs	r0, r2
 80040f2:	d0f5      	beq.n	80040e0 <rint+0x6c>
 80040f4:	084b      	lsrs	r3, r1, #1
 80040f6:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80040fa:	ea52 0501 	orrs.w	r5, r2, r1
 80040fe:	d00c      	beq.n	800411a <rint+0xa6>
 8004100:	ea24 0303 	bic.w	r3, r4, r3
 8004104:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004108:	2f13      	cmp	r7, #19
 800410a:	bf0c      	ite	eq
 800410c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8004110:	2500      	movne	r5, #0
 8004112:	fa44 f707 	asr.w	r7, r4, r7
 8004116:	ea43 0407 	orr.w	r4, r3, r7
 800411a:	4919      	ldr	r1, [pc, #100]	; (8004180 <rint+0x10c>)
 800411c:	4623      	mov	r3, r4
 800411e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8004122:	462a      	mov	r2, r5
 8004124:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004128:	4620      	mov	r0, r4
 800412a:	4629      	mov	r1, r5
 800412c:	f7fc f816 	bl	800015c <__adddf3>
 8004130:	e9cd 0100 	strd	r0, r1, [sp]
 8004134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004138:	4622      	mov	r2, r4
 800413a:	462b      	mov	r3, r5
 800413c:	f7fc f80c 	bl	8000158 <__aeabi_dsub>
 8004140:	e7cc      	b.n	80040dc <rint+0x68>
 8004142:	2f33      	cmp	r7, #51	; 0x33
 8004144:	dd05      	ble.n	8004152 <rint+0xde>
 8004146:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800414a:	d1c9      	bne.n	80040e0 <rint+0x6c>
 800414c:	f7fc f806 	bl	800015c <__adddf3>
 8004150:	e7c4      	b.n	80040dc <rint+0x68>
 8004152:	f04f 31ff 	mov.w	r1, #4294967295
 8004156:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800415a:	fa21 f10c 	lsr.w	r1, r1, ip
 800415e:	4208      	tst	r0, r1
 8004160:	d0be      	beq.n	80040e0 <rint+0x6c>
 8004162:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8004166:	bf18      	it	ne
 8004168:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800416c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8004170:	bf1e      	ittt	ne
 8004172:	ea20 0303 	bicne.w	r3, r0, r3
 8004176:	fa45 fc0c 	asrne.w	ip, r5, ip
 800417a:	ea43 050c 	orrne.w	r5, r3, ip
 800417e:	e7cc      	b.n	800411a <rint+0xa6>
 8004180:	08004308 	.word	0x08004308
 8004184:	000fffff 	.word	0x000fffff

08004188 <scalbn>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800418e:	4604      	mov	r4, r0
 8004190:	460d      	mov	r5, r1
 8004192:	4617      	mov	r7, r2
 8004194:	460b      	mov	r3, r1
 8004196:	b996      	cbnz	r6, 80041be <scalbn+0x36>
 8004198:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800419c:	4303      	orrs	r3, r0
 800419e:	d039      	beq.n	8004214 <scalbn+0x8c>
 80041a0:	4b35      	ldr	r3, [pc, #212]	; (8004278 <scalbn+0xf0>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	f7fc f990 	bl	80004c8 <__aeabi_dmul>
 80041a8:	4b34      	ldr	r3, [pc, #208]	; (800427c <scalbn+0xf4>)
 80041aa:	4604      	mov	r4, r0
 80041ac:	429f      	cmp	r7, r3
 80041ae:	460d      	mov	r5, r1
 80041b0:	da0f      	bge.n	80041d2 <scalbn+0x4a>
 80041b2:	a32d      	add	r3, pc, #180	; (adr r3, 8004268 <scalbn+0xe0>)
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f7fc f986 	bl	80004c8 <__aeabi_dmul>
 80041bc:	e006      	b.n	80041cc <scalbn+0x44>
 80041be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80041c2:	4296      	cmp	r6, r2
 80041c4:	d10a      	bne.n	80041dc <scalbn+0x54>
 80041c6:	4602      	mov	r2, r0
 80041c8:	f7fb ffc8 	bl	800015c <__adddf3>
 80041cc:	4604      	mov	r4, r0
 80041ce:	460d      	mov	r5, r1
 80041d0:	e020      	b.n	8004214 <scalbn+0x8c>
 80041d2:	460b      	mov	r3, r1
 80041d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80041d8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80041dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80041e0:	19b9      	adds	r1, r7, r6
 80041e2:	4291      	cmp	r1, r2
 80041e4:	dd0e      	ble.n	8004204 <scalbn+0x7c>
 80041e6:	a322      	add	r3, pc, #136	; (adr r3, 8004270 <scalbn+0xe8>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80041f0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80041f4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80041f8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80041fc:	4820      	ldr	r0, [pc, #128]	; (8004280 <scalbn+0xf8>)
 80041fe:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004202:	e7d9      	b.n	80041b8 <scalbn+0x30>
 8004204:	2900      	cmp	r1, #0
 8004206:	dd08      	ble.n	800421a <scalbn+0x92>
 8004208:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800420c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004210:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004214:	4620      	mov	r0, r4
 8004216:	4629      	mov	r1, r5
 8004218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800421e:	da16      	bge.n	800424e <scalbn+0xc6>
 8004220:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004224:	429f      	cmp	r7, r3
 8004226:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800422a:	dd08      	ble.n	800423e <scalbn+0xb6>
 800422c:	4c15      	ldr	r4, [pc, #84]	; (8004284 <scalbn+0xfc>)
 800422e:	4814      	ldr	r0, [pc, #80]	; (8004280 <scalbn+0xf8>)
 8004230:	f363 74df 	bfi	r4, r3, #31, #1
 8004234:	a30e      	add	r3, pc, #56	; (adr r3, 8004270 <scalbn+0xe8>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	4621      	mov	r1, r4
 800423c:	e7bc      	b.n	80041b8 <scalbn+0x30>
 800423e:	4c12      	ldr	r4, [pc, #72]	; (8004288 <scalbn+0x100>)
 8004240:	4812      	ldr	r0, [pc, #72]	; (800428c <scalbn+0x104>)
 8004242:	f363 74df 	bfi	r4, r3, #31, #1
 8004246:	a308      	add	r3, pc, #32	; (adr r3, 8004268 <scalbn+0xe0>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	e7f5      	b.n	800423a <scalbn+0xb2>
 800424e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004252:	3136      	adds	r1, #54	; 0x36
 8004254:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004258:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800425c:	4620      	mov	r0, r4
 800425e:	4629      	mov	r1, r5
 8004260:	2200      	movs	r2, #0
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <scalbn+0x108>)
 8004264:	e7a8      	b.n	80041b8 <scalbn+0x30>
 8004266:	bf00      	nop
 8004268:	c2f8f359 	.word	0xc2f8f359
 800426c:	01a56e1f 	.word	0x01a56e1f
 8004270:	8800759c 	.word	0x8800759c
 8004274:	7e37e43c 	.word	0x7e37e43c
 8004278:	43500000 	.word	0x43500000
 800427c:	ffff3cb0 	.word	0xffff3cb0
 8004280:	8800759c 	.word	0x8800759c
 8004284:	7e37e43c 	.word	0x7e37e43c
 8004288:	01a56e1f 	.word	0x01a56e1f
 800428c:	c2f8f359 	.word	0xc2f8f359
 8004290:	3c900000 	.word	0x3c900000

08004294 <_init>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr

080042a0 <_fini>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr
